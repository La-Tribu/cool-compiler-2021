
.text
main:
	move       $fp, $sp
	subu       $sp, $sp, 28
	la         $t0, Object_abort
	usw        $t0, vt_Object+0
	la         $t0, Object_type_name
	usw        $t0, vt_Object+4
	la         $t0, Object_copy
	usw        $t0, vt_Object+8
	la         $t0, Object_abort
	usw        $t0, vt_IO+0
	la         $t0, Object_type_name
	usw        $t0, vt_IO+4
	la         $t0, Object_copy
	usw        $t0, vt_IO+8
	la         $t0, IO_out_string
	usw        $t0, vt_IO+12
	la         $t0, IO_out_int
	usw        $t0, vt_IO+16
	la         $t0, IO_in_string
	usw        $t0, vt_IO+20
	la         $t0, IO_in_int
	usw        $t0, vt_IO+24
	la         $t0, Int_abort
	usw        $t0, vt_Int+0
	la         $t0, Int_type_name
	usw        $t0, vt_Int+4
	la         $t0, Object_copy
	usw        $t0, vt_Int+8
	la         $t0, String_abort
	usw        $t0, vt_String+0
	la         $t0, String_type_name
	usw        $t0, vt_String+4
	la         $t0, Object_copy
	usw        $t0, vt_String+8
	la         $t0, String_length
	usw        $t0, vt_String+28
	la         $t0, String_concat
	usw        $t0, vt_String+32
	la         $t0, String_substr
	usw        $t0, vt_String+36
	la         $t0, Bool_abort
	usw        $t0, vt_Bool+0
	la         $t0, Bool_type_name
	usw        $t0, vt_Bool+4
	la         $t0, Object_copy
	usw        $t0, vt_Bool+8
	la         $t0, Object_abort
	usw        $t0, vt_A+0
	la         $t0, Object_type_name
	usw        $t0, vt_A+4
	la         $t0, Object_copy
	usw        $t0, vt_A+8
	la         $t0, A_out_a
	usw        $t0, vt_A+40
	la         $t0, A___init__
	usw        $t0, vt_A+44
	la         $t0, Object_abort
	usw        $t0, vt_B+0
	la         $t0, Object_type_name
	usw        $t0, vt_B+4
	la         $t0, Object_copy
	usw        $t0, vt_B+8
	la         $t0, A_out_a
	usw        $t0, vt_B+40
	la         $t0, B_out_b
	usw        $t0, vt_B+48
	la         $t0, B___init__
	usw        $t0, vt_B+44
	la         $t0, Object_abort
	usw        $t0, vt_C+0
	la         $t0, Object_type_name
	usw        $t0, vt_C+4
	la         $t0, Object_copy
	usw        $t0, vt_C+8
	la         $t0, IO_out_string
	usw        $t0, vt_C+12
	la         $t0, IO_out_int
	usw        $t0, vt_C+16
	la         $t0, IO_in_string
	usw        $t0, vt_C+20
	la         $t0, IO_in_int
	usw        $t0, vt_C+24
	la         $t0, C_out_c
	usw        $t0, vt_C+52
	la         $t0, C___init__
	usw        $t0, vt_C+44
	la         $t0, Object_abort
	usw        $t0, vt_D+0
	la         $t0, Object_type_name
	usw        $t0, vt_D+4
	la         $t0, Object_copy
	usw        $t0, vt_D+8
	la         $t0, IO_out_string
	usw        $t0, vt_D+12
	la         $t0, IO_out_int
	usw        $t0, vt_D+16
	la         $t0, IO_in_string
	usw        $t0, vt_D+20
	la         $t0, IO_in_int
	usw        $t0, vt_D+24
	la         $t0, C_out_c
	usw        $t0, vt_D+52
	la         $t0, D_out_d
	usw        $t0, vt_D+56
	la         $t0, D___init__
	usw        $t0, vt_D+44
	la         $t0, Object_abort
	usw        $t0, vt_Main+0
	la         $t0, Object_type_name
	usw        $t0, vt_Main+4
	la         $t0, Object_copy
	usw        $t0, vt_Main+8
	la         $t0, IO_out_string
	usw        $t0, vt_Main+12
	la         $t0, IO_out_int
	usw        $t0, vt_Main+16
	la         $t0, IO_in_string
	usw        $t0, vt_Main+20
	la         $t0, IO_in_int
	usw        $t0, vt_Main+24
	la         $t0, Main_main
	usw        $t0, vt_Main+60
	la         $t0, Main___init__
	usw        $t0, vt_Main+44
	#          self = ALLOCATE Main ;
	li         $a0, 36
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_Main
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_1 ;
	la         $t0, data_1
	sw         $t0, -8($fp)
	#          SETATTR self @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 20 ;
	li         $t0, 20
	sw         $t0, -12($fp)
	#          SETATTR self @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 1 ;
	li         $t0, 1
	sw         $t0, -16($fp)
	#          SETATTR self @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 1 ;
	li         $t0, 1
	sw         $t0, -20($fp)
	#          SETATTR self @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL Main __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Main___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          main_result = VCALL Main main ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Main_main
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          RETURN main_result ;
	lw         $v0, -28($fp)
	addu       $sp, $sp, 28
	li         $v0, 10
	syscall
IO_out_int:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          PRINT int ;
	lw         $a0, 0($fp)
	li         $v0, 1
	syscall
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
IO_out_string:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          PRINT str ;
	lw         $a0, 0($fp)
	li         $v0, 4
	syscall
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
IO_in_string:
	move       $fp, $sp
	subu       $sp, $sp, 4
	li         $a0, 1024
	li         $v0, 9
	syscall
	move       $a0, $v0
	move       $t3, $v0
	li         $a1, 1024
	li         $v0, 8
	syscall
	remove_nl_loop:

	lb         $t0, ($a0)
	beqz       $t0, end_loop
	la         $t1, new_line
	lb         $t2, ($t1)
	beq        $t0, $t2, end_loop
	addu       $a0, $a0, 1
	b          remove_nl_loop
	end_loop:

	sb         $zero, ($a0)
	sw         $t3, -4($fp)
	#          RETURN read_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
IO_in_int:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          int = READINT ;
	li         $v0, 5
	syscall
	sw         $v0, -4($fp)
	#          RETURN int ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          type = TYPEOF self ;
	lw         $t0, 0($fp)
	lw         $t1, ($t0)
	sw         $t1, -4($fp)
	#          RETURN type ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_copy:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          copy = COPY self ;
	lw         $a0, 8($fp)
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	addu       $t1, $fp, 0
	addu       $t2, $fp, -4
	copy_loop:

	lw         $t0, ($t1)
	sw         $t0, ($t2)
	addu       $t1, $t1, 4
	addu       $t2, $t2, 4
	subu       $a0, $a0, 4
	beqz       $a0, end_copy_loop
	b          copy_loop
	end_copy_loop:

	#          RETURN copy ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_length:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          len_result = LENGTH self ;
	lw         $t2, 0($fp)
	li         $t1, 0
	length_loop:

	lb         $t0, ($t2)
	beqz       $t0, end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          length_loop
	end_length_loop:

	sw         $t1, -4($fp)
	#          RETURN len_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_concat:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          concat_result = CONCAT self key ;
	lw         $t2, 4($fp)
	li         $t1, 0
	concat_a_length_loop:

	lb         $t0, ($t2)
	beqz       $t0, concat_a_end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          concat_a_length_loop
	concat_a_end_length_loop:

	lw         $t2, 0($fp)
	concat_b_length_loop:

	lb         $t0, ($t2)
	beqz       $t0, concat_b_end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          concat_b_length_loop
	concat_b_end_length_loop:

	addu       $a0, $t1, 1
	li         $v0, 9
	syscall
	move       $t0, $v0
	lw         $t1, 4($fp)
	lw         $t2, 0($fp)
	concat_loop_a:

	lb         $a0, ($t1)
	beqz       $a0, concat_loop_b
	sb         $a0, ($t0)
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          concat_loop_a
	concat_loop_b:

	lb         $a0, ($t2)
	beqz       $a0, end_concat
	sb         $a0, ($t0)
	addu       $t0, $t0, 1
	addu       $t2, $t2, 1
	b          concat_loop_b
	end_concat:

	sb         $zero, ($t0)
	sw         $v0, -4($fp)
	#          RETURN concat_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_substr:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          substring_result = SUBSTRING self i l;
	lw         $t0, 8($fp)
	lw         $a0, 0($fp)
	addu       $a0, $a0, 1
	li         $v0, 9
	syscall
	move       $t1, $v0
	lw         $t4, 4($fp)
	lw         $t2, 0($fp)
	addu       $t0, $t0, $t4
	substring_loop:

	beqz       $t2, end_substring_loop
	lb         $t3, ($t0)
	sb         $t3, ($t1)
	subu       $t2, $t2, 1
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          substring_loop
	end_substring_loop:

	sb         $zero, ($t1)
	sw         $v0, -4($fp)
	#          RETURN substring_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT None ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	lw         $a0, ($fp)
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
String_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT String ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_String
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Int_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT Int ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_Int
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Bool_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT Bool ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_Bool
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Bool_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_35 = LOAD data_12 ;
	la         $t0, data_12
	sw         $t0, -4($fp)
	#          RETURN local_35 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Int_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_36 = LOAD data_13 ;
	la         $t0, data_13
	sw         $t0, -4($fp)
	#          RETURN local_36 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_37 = LOAD data_14 ;
	la         $t0, data_14
	sw         $t0, -4($fp)
	#          RETURN local_37 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
A___init__:
	move       $fp, $sp
	subu       $sp, $sp, 20
	#          local_0 = ALLOCATE IO ;
	li         $a0, 36
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_IO
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -8($fp)
	#          SETATTR local_0 @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 20 ;
	li         $t0, 20
	sw         $t0, -12($fp)
	#          SETATTR local_0 @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 4 ;
	li         $t0, 4
	sw         $t0, -16($fp)
	#          SETATTR local_0 @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 1 ;
	li         $t0, 1
	sw         $t0, -20($fp)
	#          SETATTR local_0 @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          SETATTR self io local_0 ;
	lw         $t0, -4($fp)
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 20
	jr         $ra
A_out_a:
	move       $fp, $sp
	subu       $sp, $sp, 16
	#          local_1 = GETATTR self io ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -12($fp)
	#          local_3 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          RETURN local_3 ;
	lw         $v0, -16($fp)
	addu       $sp, $sp, 16
	jr         $ra
B___init__:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = VCALL A __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        A___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 4
	jr         $ra
B_out_b:
	move       $fp, $sp
	subu       $sp, $sp, 16
	#          local_1 = GETATTR self io ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_3 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          RETURN local_3 ;
	lw         $v0, -16($fp)
	addu       $sp, $sp, 16
	jr         $ra
C___init__:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 0
	jr         $ra
C_out_c:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = LOAD data_5 ;
	la         $t0, data_5
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
D___init__:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = VCALL C __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        C___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 4
	jr         $ra
D_out_d:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = LOAD data_6 ;
	la         $t0, data_6
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
Main___init__:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 0
	jr         $ra
Main_main:
	move       $fp, $sp
	subu       $sp, $sp, 140
	#          local_1 = ALLOCATE A ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_A
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_7 ;
	la         $t0, data_7
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 24 ;
	li         $t0, 24
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 7 ;
	li         $t0, 7
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 6 ;
	li         $t0, 6
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL A __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        A___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_0 = GETTYPEADDR local_6 ;
	lw         $t1, -28($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_7 = VCALL local_0 out_a ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 40($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          local_9 = ALLOCATE B ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -40($fp)
	la         $t0, vt_B
	sw         $t0, 8($v0)
	#          local_10 = LOAD data_8 ;
	la         $t0, data_8
	sw         $t0, -44($fp)
	#          SETATTR local_9 @type local_10 ;
	lw         $t0, -44($fp)
	lw         $t1, -40($fp)
	sw         $t0, 0($t1)
	#          local_11 = 24 ;
	li         $t0, 24
	sw         $t0, -48($fp)
	#          SETATTR local_9 @size local_11 ;
	lw         $t0, -48($fp)
	lw         $t1, -40($fp)
	sw         $t0, 4($t1)
	#          local_12 = 6 ;
	li         $t0, 6
	sw         $t0, -52($fp)
	#          SETATTR local_9 @order local_12 ;
	lw         $t0, -52($fp)
	lw         $t1, -40($fp)
	sw         $t0, 12($t1)
	#          local_13 = 6 ;
	li         $t0, 6
	sw         $t0, -56($fp)
	#          SETATTR local_9 @min_order local_13 ;
	lw         $t0, -56($fp)
	lw         $t1, -40($fp)
	sw         $t0, 16($t1)
	#          local_14 = VCALL B __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_9 ;
	lw         $t0, -40($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        B___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -60($fp)
	#          local_8 = GETTYPEADDR local_14 ;
	lw         $t1, -60($fp)
	lw         $t0, 8($t1)
	sw         $t0, -36($fp)
	#          local_15 = VCALL local_8 out_b ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_14 ;
	lw         $t0, -60($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -36($fp)
	ulw        $t1, 48($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -64($fp)
	#          local_17 = ALLOCATE C ;
	li         $a0, 36
	li         $v0, 9
	syscall
	sw         $v0, -72($fp)
	la         $t0, vt_C
	sw         $t0, 8($v0)
	#          local_18 = LOAD data_9 ;
	la         $t0, data_9
	sw         $t0, -76($fp)
	#          SETATTR local_17 @type local_18 ;
	lw         $t0, -76($fp)
	lw         $t1, -72($fp)
	sw         $t0, 0($t1)
	#          local_19 = 20 ;
	li         $t0, 20
	sw         $t0, -80($fp)
	#          SETATTR local_17 @size local_19 ;
	lw         $t0, -80($fp)
	lw         $t1, -72($fp)
	sw         $t0, 4($t1)
	#          local_20 = 3 ;
	li         $t0, 3
	sw         $t0, -84($fp)
	#          SETATTR local_17 @order local_20 ;
	lw         $t0, -84($fp)
	lw         $t1, -72($fp)
	sw         $t0, 12($t1)
	#          local_21 = 2 ;
	li         $t0, 2
	sw         $t0, -88($fp)
	#          SETATTR local_17 @min_order local_21 ;
	lw         $t0, -88($fp)
	lw         $t1, -72($fp)
	sw         $t0, 16($t1)
	#          local_22 = VCALL C __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_17 ;
	lw         $t0, -72($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        C___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -92($fp)
	#          local_16 = GETTYPEADDR local_22 ;
	lw         $t1, -92($fp)
	lw         $t0, 8($t1)
	sw         $t0, -68($fp)
	#          local_23 = VCALL local_16 out_c ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_22 ;
	lw         $t0, -92($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -68($fp)
	ulw        $t1, 52($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -96($fp)
	#          local_25 = ALLOCATE D ;
	li         $a0, 36
	li         $v0, 9
	syscall
	sw         $v0, -104($fp)
	la         $t0, vt_D
	sw         $t0, 8($v0)
	#          local_26 = LOAD data_10 ;
	la         $t0, data_10
	sw         $t0, -108($fp)
	#          SETATTR local_25 @type local_26 ;
	lw         $t0, -108($fp)
	lw         $t1, -104($fp)
	sw         $t0, 0($t1)
	#          local_27 = 20 ;
	li         $t0, 20
	sw         $t0, -112($fp)
	#          SETATTR local_25 @size local_27 ;
	lw         $t0, -112($fp)
	lw         $t1, -104($fp)
	sw         $t0, 4($t1)
	#          local_28 = 2 ;
	li         $t0, 2
	sw         $t0, -116($fp)
	#          SETATTR local_25 @order local_28 ;
	lw         $t0, -116($fp)
	lw         $t1, -104($fp)
	sw         $t0, 12($t1)
	#          local_29 = 2 ;
	li         $t0, 2
	sw         $t0, -120($fp)
	#          SETATTR local_25 @min_order local_29 ;
	lw         $t0, -120($fp)
	lw         $t1, -104($fp)
	sw         $t0, 16($t1)
	#          local_30 = VCALL D __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_25 ;
	lw         $t0, -104($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        D___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -124($fp)
	#          local_24 = GETTYPEADDR local_30 ;
	lw         $t1, -124($fp)
	lw         $t0, 8($t1)
	sw         $t0, -100($fp)
	#          local_31 = VCALL local_24 out_d ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_30 ;
	lw         $t0, -124($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -100($fp)
	ulw        $t1, 56($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -128($fp)
	#          local_32 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -132($fp)
	#          local_33 = LOAD data_11 ;
	la         $t0, data_11
	sw         $t0, -136($fp)
	#          local_34 = VCALL local_32 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_33 ;
	lw         $t0, -136($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -132($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -140($fp)
	#          RETURN local_34 ;
	lw         $v0, -140($fp)
	addu       $sp, $sp, 140
	jr         $ra

.data
	data_1:
		.asciiz    "Main"
	data_2:
		.asciiz    "IO"
	data_3:
		.asciiz    "A: Hello world\n"
	data_4:
		.asciiz    "B: Hello world\n"
	data_5:
		.asciiz    "C: Hello world\n"
	data_6:
		.asciiz    "D: Hello world\n"
	data_7:
		.asciiz    "A"
	data_8:
		.asciiz    "B"
	data_9:
		.asciiz    "C"
	data_10:
		.asciiz    "D"
	data_11:
		.asciiz    "Done.\n"
	data_12:
		.asciiz    "Bool"
	data_13:
		.asciiz    "Int"
	data_14:
		.asciiz    "String"
	data_abort:
		.asciiz    "Abort called from class "
	new_line:
		.asciiz    "\n"
	vt_Object:
		.space     288
	vt_IO:
		.space     288
	vt_Int:
		.space     288
	vt_String:
		.space     288
	vt_Bool:
		.space     288
	vt_A:
		.space     288
	vt_B:
		.space     288
	vt_C:
		.space     288
	vt_D:
		.space     288
	vt_Main:
		.space     288
	abort_String:
		.asciiz    "String"
	abort_Int:
		.asciiz    "Int"
	abort_Bool:
		.asciiz    "Bool"
