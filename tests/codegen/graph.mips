
.text
main:
	move       $fp, $sp
	subu       $sp, $sp, 28
	la         $t0, Object_abort
	usw        $t0, vt_Object+0
	la         $t0, Object_type_name
	usw        $t0, vt_Object+4
	la         $t0, Object_copy
	usw        $t0, vt_Object+8
	la         $t0, Object_abort
	usw        $t0, vt_IO+0
	la         $t0, Object_type_name
	usw        $t0, vt_IO+4
	la         $t0, Object_copy
	usw        $t0, vt_IO+8
	la         $t0, IO_out_string
	usw        $t0, vt_IO+12
	la         $t0, IO_out_int
	usw        $t0, vt_IO+16
	la         $t0, IO_in_string
	usw        $t0, vt_IO+20
	la         $t0, IO_in_int
	usw        $t0, vt_IO+24
	la         $t0, Int_abort
	usw        $t0, vt_Int+0
	la         $t0, Int_type_name
	usw        $t0, vt_Int+4
	la         $t0, Object_copy
	usw        $t0, vt_Int+8
	la         $t0, String_abort
	usw        $t0, vt_String+0
	la         $t0, String_type_name
	usw        $t0, vt_String+4
	la         $t0, Object_copy
	usw        $t0, vt_String+8
	la         $t0, String_length
	usw        $t0, vt_String+28
	la         $t0, String_concat
	usw        $t0, vt_String+32
	la         $t0, String_substr
	usw        $t0, vt_String+36
	la         $t0, Bool_abort
	usw        $t0, vt_Bool+0
	la         $t0, Bool_type_name
	usw        $t0, vt_Bool+4
	la         $t0, Object_copy
	usw        $t0, vt_Bool+8
	la         $t0, Object_abort
	usw        $t0, vt_Graph+0
	la         $t0, Object_type_name
	usw        $t0, vt_Graph+4
	la         $t0, Object_copy
	usw        $t0, vt_Graph+8
	la         $t0, Graph_add_vertice
	usw        $t0, vt_Graph+40
	la         $t0, Graph_print_E
	usw        $t0, vt_Graph+44
	la         $t0, Graph_print_V
	usw        $t0, vt_Graph+48
	la         $t0, Graph___init__
	usw        $t0, vt_Graph+52
	la         $t0, Object_abort
	usw        $t0, vt_Vertice+0
	la         $t0, Object_type_name
	usw        $t0, vt_Vertice+4
	la         $t0, Object_copy
	usw        $t0, vt_Vertice+8
	la         $t0, IO_out_string
	usw        $t0, vt_Vertice+12
	la         $t0, IO_out_int
	usw        $t0, vt_Vertice+16
	la         $t0, IO_in_string
	usw        $t0, vt_Vertice+20
	la         $t0, IO_in_int
	usw        $t0, vt_Vertice+24
	la         $t0, Vertice_outgoing
	usw        $t0, vt_Vertice+56
	la         $t0, Vertice_number
	usw        $t0, vt_Vertice+60
	la         $t0, Vertice_init
	usw        $t0, vt_Vertice+64
	la         $t0, Vertice_add_out
	usw        $t0, vt_Vertice+68
	la         $t0, Vertice_print
	usw        $t0, vt_Vertice+72
	la         $t0, Vertice___init__
	usw        $t0, vt_Vertice+52
	la         $t0, Object_abort
	usw        $t0, vt_Edge+0
	la         $t0, Object_type_name
	usw        $t0, vt_Edge+4
	la         $t0, Object_copy
	usw        $t0, vt_Edge+8
	la         $t0, IO_out_string
	usw        $t0, vt_Edge+12
	la         $t0, IO_out_int
	usw        $t0, vt_Edge+16
	la         $t0, IO_in_string
	usw        $t0, vt_Edge+20
	la         $t0, IO_in_int
	usw        $t0, vt_Edge+24
	la         $t0, Edge_init
	usw        $t0, vt_Edge+64
	la         $t0, Edge_print
	usw        $t0, vt_Edge+72
	la         $t0, Edge___init__
	usw        $t0, vt_Edge+52
	la         $t0, Object_abort
	usw        $t0, vt_EList+0
	la         $t0, Object_type_name
	usw        $t0, vt_EList+4
	la         $t0, Object_copy
	usw        $t0, vt_EList+8
	la         $t0, IO_out_string
	usw        $t0, vt_EList+12
	la         $t0, IO_out_int
	usw        $t0, vt_EList+16
	la         $t0, IO_in_string
	usw        $t0, vt_EList+20
	la         $t0, IO_in_int
	usw        $t0, vt_EList+24
	la         $t0, EList_isNil
	usw        $t0, vt_EList+76
	la         $t0, EList_head
	usw        $t0, vt_EList+80
	la         $t0, EList_tail
	usw        $t0, vt_EList+84
	la         $t0, EList_cons
	usw        $t0, vt_EList+88
	la         $t0, EList_append
	usw        $t0, vt_EList+92
	la         $t0, EList_print
	usw        $t0, vt_EList+72
	la         $t0, EList___init__
	usw        $t0, vt_EList+52
	la         $t0, Object_abort
	usw        $t0, vt_ECons+0
	la         $t0, Object_type_name
	usw        $t0, vt_ECons+4
	la         $t0, Object_copy
	usw        $t0, vt_ECons+8
	la         $t0, IO_out_string
	usw        $t0, vt_ECons+12
	la         $t0, IO_out_int
	usw        $t0, vt_ECons+16
	la         $t0, IO_in_string
	usw        $t0, vt_ECons+20
	la         $t0, IO_in_int
	usw        $t0, vt_ECons+24
	la         $t0, ECons_isNil
	usw        $t0, vt_ECons+76
	la         $t0, ECons_head
	usw        $t0, vt_ECons+80
	la         $t0, ECons_tail
	usw        $t0, vt_ECons+84
	la         $t0, EList_cons
	usw        $t0, vt_ECons+88
	la         $t0, EList_append
	usw        $t0, vt_ECons+92
	la         $t0, ECons_print
	usw        $t0, vt_ECons+72
	la         $t0, ECons_init
	usw        $t0, vt_ECons+64
	la         $t0, ECons___init__
	usw        $t0, vt_ECons+52
	la         $t0, Object_abort
	usw        $t0, vt_VList+0
	la         $t0, Object_type_name
	usw        $t0, vt_VList+4
	la         $t0, Object_copy
	usw        $t0, vt_VList+8
	la         $t0, IO_out_string
	usw        $t0, vt_VList+12
	la         $t0, IO_out_int
	usw        $t0, vt_VList+16
	la         $t0, IO_in_string
	usw        $t0, vt_VList+20
	la         $t0, IO_in_int
	usw        $t0, vt_VList+24
	la         $t0, VList_isNil
	usw        $t0, vt_VList+76
	la         $t0, VList_head
	usw        $t0, vt_VList+80
	la         $t0, VList_tail
	usw        $t0, vt_VList+84
	la         $t0, VList_cons
	usw        $t0, vt_VList+88
	la         $t0, VList_print
	usw        $t0, vt_VList+72
	la         $t0, VList___init__
	usw        $t0, vt_VList+52
	la         $t0, Object_abort
	usw        $t0, vt_VCons+0
	la         $t0, Object_type_name
	usw        $t0, vt_VCons+4
	la         $t0, Object_copy
	usw        $t0, vt_VCons+8
	la         $t0, IO_out_string
	usw        $t0, vt_VCons+12
	la         $t0, IO_out_int
	usw        $t0, vt_VCons+16
	la         $t0, IO_in_string
	usw        $t0, vt_VCons+20
	la         $t0, IO_in_int
	usw        $t0, vt_VCons+24
	la         $t0, VCons_isNil
	usw        $t0, vt_VCons+76
	la         $t0, VCons_head
	usw        $t0, vt_VCons+80
	la         $t0, VCons_tail
	usw        $t0, vt_VCons+84
	la         $t0, VList_cons
	usw        $t0, vt_VCons+88
	la         $t0, VCons_print
	usw        $t0, vt_VCons+72
	la         $t0, VCons_init
	usw        $t0, vt_VCons+64
	la         $t0, VCons___init__
	usw        $t0, vt_VCons+52
	la         $t0, Object_abort
	usw        $t0, vt_Parse+0
	la         $t0, Object_type_name
	usw        $t0, vt_Parse+4
	la         $t0, Object_copy
	usw        $t0, vt_Parse+8
	la         $t0, IO_out_string
	usw        $t0, vt_Parse+12
	la         $t0, IO_out_int
	usw        $t0, vt_Parse+16
	la         $t0, IO_in_string
	usw        $t0, vt_Parse+20
	la         $t0, IO_in_int
	usw        $t0, vt_Parse+24
	la         $t0, Parse_read_input
	usw        $t0, vt_Parse+96
	la         $t0, Parse_parse_line
	usw        $t0, vt_Parse+100
	la         $t0, Parse_c2i
	usw        $t0, vt_Parse+104
	la         $t0, Parse_a2i
	usw        $t0, vt_Parse+108
	la         $t0, Parse_a2i_aux
	usw        $t0, vt_Parse+112
	la         $t0, Parse___init__
	usw        $t0, vt_Parse+52
	la         $t0, Object_abort
	usw        $t0, vt_Main+0
	la         $t0, Object_type_name
	usw        $t0, vt_Main+4
	la         $t0, Object_copy
	usw        $t0, vt_Main+8
	la         $t0, IO_out_string
	usw        $t0, vt_Main+12
	la         $t0, IO_out_int
	usw        $t0, vt_Main+16
	la         $t0, IO_in_string
	usw        $t0, vt_Main+20
	la         $t0, IO_in_int
	usw        $t0, vt_Main+24
	la         $t0, Parse_read_input
	usw        $t0, vt_Main+96
	la         $t0, Parse_parse_line
	usw        $t0, vt_Main+100
	la         $t0, Parse_c2i
	usw        $t0, vt_Main+104
	la         $t0, Parse_a2i
	usw        $t0, vt_Main+108
	la         $t0, Parse_a2i_aux
	usw        $t0, vt_Main+112
	la         $t0, Main_main
	usw        $t0, vt_Main+116
	la         $t0, Main___init__
	usw        $t0, vt_Main+52
	la         $t0, Object_abort
	usw        $t0, vt_BoolOp+0
	la         $t0, Object_type_name
	usw        $t0, vt_BoolOp+4
	la         $t0, Object_copy
	usw        $t0, vt_BoolOp+8
	la         $t0, BoolOp_and
	usw        $t0, vt_BoolOp+120
	la         $t0, BoolOp_or
	usw        $t0, vt_BoolOp+124
	la         $t0, BoolOp___init__
	usw        $t0, vt_BoolOp+52
	#          self = ALLOCATE Main ;
	li         $a0, 48
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_Main
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_1 ;
	la         $t0, data_1
	sw         $t0, -8($fp)
	#          SETATTR self @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 32 ;
	li         $t0, 32
	sw         $t0, -12($fp)
	#          SETATTR self @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 6 ;
	li         $t0, 6
	sw         $t0, -16($fp)
	#          SETATTR self @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 6 ;
	li         $t0, 6
	sw         $t0, -20($fp)
	#          SETATTR self @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL Main __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Main___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          main_result = VCALL Main main ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Main_main
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          RETURN main_result ;
	lw         $v0, -28($fp)
	addu       $sp, $sp, 28
	li         $v0, 10
	syscall
IO_out_int:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          PRINT int ;
	lw         $a0, 0($fp)
	li         $v0, 1
	syscall
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
IO_out_string:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          PRINT str ;
	lw         $a0, 0($fp)
	li         $v0, 4
	syscall
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
IO_in_string:
	move       $fp, $sp
	subu       $sp, $sp, 4
	li         $a0, 1024
	li         $v0, 9
	syscall
	move       $a0, $v0
	move       $t3, $v0
	li         $a1, 1024
	li         $v0, 8
	syscall
	remove_nl_loop:

	lb         $t0, ($a0)
	beqz       $t0, end_loop
	la         $t1, new_line
	lb         $t2, ($t1)
	beq        $t0, $t2, end_loop
	addu       $a0, $a0, 1
	b          remove_nl_loop
	end_loop:

	sb         $zero, ($a0)
	sw         $t3, -4($fp)
	#          RETURN read_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
IO_in_int:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          int = READINT ;
	li         $v0, 5
	syscall
	sw         $v0, -4($fp)
	#          RETURN int ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          type = TYPEOF self ;
	lw         $t0, 0($fp)
	lw         $t1, ($t0)
	sw         $t1, -4($fp)
	#          RETURN type ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_copy:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          copy = COPY self ;
	lw         $a0, 8($fp)
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	addu       $t1, $fp, 0
	addu       $t2, $fp, -4
	copy_loop:

	lw         $t0, ($t1)
	sw         $t0, ($t2)
	addu       $t1, $t1, 4
	addu       $t2, $t2, 4
	subu       $a0, $a0, 4
	beqz       $a0, end_copy_loop
	b          copy_loop
	end_copy_loop:

	#          RETURN copy ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_length:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          len_result = LENGTH self ;
	lw         $t2, 0($fp)
	li         $t1, 0
	length_loop:

	lb         $t0, ($t2)
	beqz       $t0, end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          length_loop
	end_length_loop:

	sw         $t1, -4($fp)
	#          RETURN len_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_concat:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          concat_result = CONCAT self key ;
	lw         $t2, 4($fp)
	li         $t1, 0
	concat_a_length_loop:

	lb         $t0, ($t2)
	beqz       $t0, concat_a_end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          concat_a_length_loop
	concat_a_end_length_loop:

	lw         $t2, 0($fp)
	concat_b_length_loop:

	lb         $t0, ($t2)
	beqz       $t0, concat_b_end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          concat_b_length_loop
	concat_b_end_length_loop:

	addu       $a0, $t1, 1
	li         $v0, 9
	syscall
	move       $t0, $v0
	lw         $t1, 4($fp)
	lw         $t2, 0($fp)
	concat_loop_a:

	lb         $a0, ($t1)
	beqz       $a0, concat_loop_b
	sb         $a0, ($t0)
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          concat_loop_a
	concat_loop_b:

	lb         $a0, ($t2)
	beqz       $a0, end_concat
	sb         $a0, ($t0)
	addu       $t0, $t0, 1
	addu       $t2, $t2, 1
	b          concat_loop_b
	end_concat:

	sb         $zero, ($t0)
	sw         $v0, -4($fp)
	#          RETURN concat_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_substr:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          substring_result = SUBSTRING self i l;
	lw         $t0, 8($fp)
	lw         $a0, 0($fp)
	addu       $a0, $a0, 1
	li         $v0, 9
	syscall
	move       $t1, $v0
	lw         $t4, 4($fp)
	lw         $t2, 0($fp)
	addu       $t0, $t0, $t4
	substring_loop:

	beqz       $t2, end_substring_loop
	lb         $t3, ($t0)
	sb         $t3, ($t1)
	subu       $t2, $t2, 1
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          substring_loop
	end_substring_loop:

	sb         $zero, ($t1)
	sw         $v0, -4($fp)
	#          RETURN substring_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT None ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	lw         $a0, ($fp)
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
String_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT String ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_String
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Int_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT Int ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_Int
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Bool_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT Bool ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_Bool
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Bool_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_1 = LOAD data_27 ;
	la         $t0, data_27
	sw         $t0, -4($fp)
	#          RETURN local_1 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Int_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_2 = LOAD data_28 ;
	la         $t0, data_28
	sw         $t0, -4($fp)
	#          RETURN local_2 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_3 = LOAD data_29 ;
	la         $t0, data_29
	sw         $t0, -4($fp)
	#          RETURN local_3 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Graph___init__:
	move       $fp, $sp
	subu       $sp, $sp, 48
	#          local_0 = ALLOCATE VList ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_VList
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -8($fp)
	#          SETATTR local_0 @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 24 ;
	li         $t0, 24
	sw         $t0, -12($fp)
	#          SETATTR local_0 @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 2 ;
	li         $t0, 2
	sw         $t0, -16($fp)
	#          SETATTR local_0 @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 1 ;
	li         $t0, 1
	sw         $t0, -20($fp)
	#          SETATTR local_0 @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL VList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_0 ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        VList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          SETATTR self vertices local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          local_6 = ALLOCATE EList ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -28($fp)
	la         $t0, vt_EList
	sw         $t0, 8($v0)
	#          local_7 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -32($fp)
	#          SETATTR local_6 @type local_7 ;
	lw         $t0, -32($fp)
	lw         $t1, -28($fp)
	sw         $t0, 0($t1)
	#          local_8 = 24 ;
	li         $t0, 24
	sw         $t0, -36($fp)
	#          SETATTR local_6 @size local_8 ;
	lw         $t0, -36($fp)
	lw         $t1, -28($fp)
	sw         $t0, 4($t1)
	#          local_9 = 4 ;
	li         $t0, 4
	sw         $t0, -40($fp)
	#          SETATTR local_6 @order local_9 ;
	lw         $t0, -40($fp)
	lw         $t1, -28($fp)
	sw         $t0, 12($t1)
	#          local_10 = 3 ;
	li         $t0, 3
	sw         $t0, -44($fp)
	#          SETATTR local_6 @min_order local_10 ;
	lw         $t0, -44($fp)
	lw         $t1, -28($fp)
	sw         $t0, 16($t1)
	#          local_11 = VCALL EList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        EList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          SETATTR self edges local_11 ;
	lw         $t0, -48($fp)
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 48
	jr         $ra
Graph_add_vertice:
	move       $fp, $sp
	subu       $sp, $sp, 32
	#          local_1 = GETTYPEADDR v ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_1 outgoing ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG v ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 56($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          local_0 = GETTYPEADDR local_2 ;
	lw         $t1, -12($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_3 = GETATTR self edges ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -16($fp)
	#          local_4 = VCALL local_0 append ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_3 ;
	lw         $t0, -16($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 92($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -20($fp)
	#          SETATTR self edges local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          local_6 = GETATTR self vertices ;
	lw         $t0, 4($fp)
	lw         $t1, 20($t0)
	sw         $t1, -28($fp)
	#          local_5 = GETTYPEADDR local_6 ;
	lw         $t1, -28($fp)
	lw         $t0, 8($t1)
	sw         $t0, -24($fp)
	#          local_7 = VCALL local_5 cons ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG v ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -24($fp)
	ulw        $t1, 88($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          SETATTR self vertices local_7 ;
	lw         $t0, -32($fp)
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          RETURN local_7 ;
	lw         $v0, -32($fp)
	addu       $sp, $sp, 32
	jr         $ra
Graph_print_E:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_1 = GETATTR self edges ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = VCALL local_0 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
Graph_print_V:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_1 = GETATTR self vertices ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = VCALL local_0 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
Vertice___init__:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          SETATTR self num 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          local_0 = ALLOCATE EList ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_EList
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -8($fp)
	#          SETATTR local_0 @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 24 ;
	li         $t0, 24
	sw         $t0, -12($fp)
	#          SETATTR local_0 @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 4 ;
	li         $t0, 4
	sw         $t0, -16($fp)
	#          SETATTR local_0 @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 3 ;
	li         $t0, 3
	sw         $t0, -20($fp)
	#          SETATTR local_0 @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL EList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_0 ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        EList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          SETATTR self out local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 24
	jr         $ra
Vertice_outgoing:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = GETATTR self out ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -4($fp)
	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Vertice_number:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = GETATTR self num ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -4($fp)
	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Vertice_init:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          SETATTR self num n ;
	lw         $t0, 0($fp)
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
Vertice_add_out:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_1 = GETATTR self out ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = VCALL local_0 cons ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 88($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          SETATTR self out local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 12
	jr         $ra
Vertice_print:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = GETATTR self num ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -8($fp)
	#          local_2 = VCALL local_0 out_int ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 16($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          local_4 = GETATTR self out ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -20($fp)
	#          local_3 = GETTYPEADDR local_4 ;
	lw         $t1, -20($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_5 = VCALL local_3 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          RETURN local_5 ;
	lw         $v0, -24($fp)
	addu       $sp, $sp, 24
	jr         $ra
Edge___init__:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          SETATTR self from 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          SETATTR self to 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          SETATTR self weight 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 28($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 0
	jr         $ra
Edge_init:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          SETATTR self from f ;
	lw         $t0, 8($fp)
	lw         $t1, 12($fp)
	sw         $t0, 20($t1)
	#          SETATTR self to t ;
	lw         $t0, 4($fp)
	lw         $t1, 12($fp)
	sw         $t0, 24($t1)
	#          SETATTR self weight w ;
	lw         $t0, 0($fp)
	lw         $t1, 12($fp)
	sw         $t0, 28($t1)
	#          RETURN self ;
	lw         $v0, 12($fp)
	addu       $sp, $sp, 0
	jr         $ra
Edge_print:
	move       $fp, $sp
	subu       $sp, $sp, 72
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          local_3 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_4 = GETATTR self from ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -20($fp)
	#          local_5 = VCALL local_3 out_int ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 16($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          local_6 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -28($fp)
	#          local_7 = LOAD data_5 ;
	la         $t0, data_5
	sw         $t0, -32($fp)
	#          local_8 = VCALL local_6 out_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_7 ;
	lw         $t0, -32($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -28($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -36($fp)
	#          local_9 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -40($fp)
	#          local_10 = GETATTR self to ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -44($fp)
	#          local_11 = VCALL local_9 out_int ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_10 ;
	lw         $t0, -44($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -40($fp)
	ulw        $t1, 16($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          local_12 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -52($fp)
	#          local_13 = LOAD data_6 ;
	la         $t0, data_6
	sw         $t0, -56($fp)
	#          local_14 = VCALL local_12 out_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_13 ;
	lw         $t0, -56($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -52($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -60($fp)
	#          local_15 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -64($fp)
	#          local_16 = GETATTR self weight ;
	lw         $t0, 0($fp)
	lw         $t1, 28($t0)
	sw         $t1, -68($fp)
	#          local_17 = VCALL local_15 out_int ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_16 ;
	lw         $t0, -68($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -64($fp)
	ulw        $t1, 16($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -72($fp)
	#          RETURN local_17 ;
	lw         $v0, -72($fp)
	addu       $sp, $sp, 72
	jr         $ra
EList___init__:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          local_0 = ALLOCATE Edge ;
	li         $a0, 48
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_Edge
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_7 ;
	la         $t0, data_7
	sw         $t0, -8($fp)
	#          SETATTR local_0 @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 32 ;
	li         $t0, 32
	sw         $t0, -12($fp)
	#          SETATTR local_0 @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 8 ;
	li         $t0, 8
	sw         $t0, -16($fp)
	#          SETATTR local_0 @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 8 ;
	li         $t0, 8
	sw         $t0, -20($fp)
	#          SETATTR local_0 @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL Edge __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_0 ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Edge___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          SETATTR self car local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 24
	jr         $ra
EList_isNil:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN 1 ;
	li         $v0, 1
	addu       $sp, $sp, 0
	jr         $ra
EList_head:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 abort ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 0($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          local_2 = GETATTR self car ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
EList_tail:
	move       $fp, $sp
	subu       $sp, $sp, 8
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 abort ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 0($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 8
	jr         $ra
EList_cons:
	move       $fp, $sp
	subu       $sp, $sp, 32
	#          local_1 = ALLOCATE ECons ;
	li         $a0, 44
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_ECons
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_8 ;
	la         $t0, data_8
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 28 ;
	li         $t0, 28
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 3 ;
	li         $t0, 3
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 3 ;
	li         $t0, 3
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL ECons __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        ECons___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_0 = GETTYPEADDR local_6 ;
	lw         $t1, -28($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_7 = VCALL local_0 init ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG e ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          RETURN local_7 ;
	lw         $v0, -32($fp)
	addu       $sp, $sp, 32
	jr         $ra
EList_append:
	move       $fp, $sp
	subu       $sp, $sp, 44
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 isNil ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 76($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          IF local_1 GOTO label_1 ;
	lw         $t0, -8($fp)
	bnez       $t0, label_1
	#          local_4 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -20($fp)
	#          local_5 = VCALL local_4 tail ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -20($fp)
	ulw        $t1, 84($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          local_3 = GETTYPEADDR local_5 ;
	lw         $t1, -24($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_6 = VCALL local_3 append ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG l ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 92($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_2 = GETTYPEADDR local_6 ;
	lw         $t1, -28($fp)
	lw         $t0, 8($t1)
	sw         $t0, -12($fp)
	#          local_7 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -32($fp)
	#          local_8 = VCALL local_7 head ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -32($fp)
	ulw        $t1, 80($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -36($fp)
	#          local_9 = VCALL local_2 cons ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_8 ;
	lw         $t0, -36($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -12($fp)
	ulw        $t1, 88($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          local_10 = local_9 ;
	lw         $t0, -40($fp)
	sw         $t0, -44($fp)
	#          GOTO label_2 ;
	b          label_2
	#          LABEL label_1 ;
	label_1:

	#          local_10 = l ;
	lw         $t0, 0($fp)
	sw         $t0, -44($fp)
	#          LABEL label_2 ;
	label_2:

	#          RETURN local_10 ;
	lw         $v0, -44($fp)
	addu       $sp, $sp, 44
	jr         $ra
EList_print:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = LOAD data_9 ;
	la         $t0, data_9
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
ECons___init__:
	move       $fp, $sp
	subu       $sp, $sp, 28
	#          local_0 = VCALL EList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        EList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          local_1 = ALLOCATE EList ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_EList
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 24 ;
	li         $t0, 24
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 4 ;
	li         $t0, 4
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 3 ;
	li         $t0, 3
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL EList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        EList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          SETATTR self cdr local_6 ;
	lw         $t0, -28($fp)
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 28
	jr         $ra
ECons_isNil:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN ;
	li         $v0, 0
	addu       $sp, $sp, 0
	jr         $ra
ECons_head:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = GETATTR self car ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -4($fp)
	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
ECons_tail:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = GETATTR self cdr ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -4($fp)
	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
ECons_init:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          SETATTR self car e ;
	lw         $t0, 4($fp)
	lw         $t1, 8($fp)
	sw         $t0, 20($t1)
	#          SETATTR self cdr rest ;
	lw         $t0, 0($fp)
	lw         $t1, 8($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 8($fp)
	addu       $sp, $sp, 0
	jr         $ra
ECons_print:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          local_1 = GETATTR self car ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = VCALL local_0 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          local_4 = GETATTR self cdr ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -20($fp)
	#          local_3 = GETTYPEADDR local_4 ;
	lw         $t1, -20($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_5 = VCALL local_3 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          RETURN local_5 ;
	lw         $v0, -24($fp)
	addu       $sp, $sp, 24
	jr         $ra
VList___init__:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          local_0 = ALLOCATE Vertice ;
	li         $a0, 44
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_Vertice
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_10 ;
	la         $t0, data_10
	sw         $t0, -8($fp)
	#          SETATTR local_0 @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 28 ;
	li         $t0, 28
	sw         $t0, -12($fp)
	#          SETATTR local_0 @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 5 ;
	li         $t0, 5
	sw         $t0, -16($fp)
	#          SETATTR local_0 @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 5 ;
	li         $t0, 5
	sw         $t0, -20($fp)
	#          SETATTR local_0 @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL Vertice __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_0 ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Vertice___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          SETATTR self car local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 24
	jr         $ra
VList_isNil:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN 1 ;
	li         $v0, 1
	addu       $sp, $sp, 0
	jr         $ra
VList_head:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 abort ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 0($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          local_2 = GETATTR self car ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
VList_tail:
	move       $fp, $sp
	subu       $sp, $sp, 8
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 abort ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 0($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 8
	jr         $ra
VList_cons:
	move       $fp, $sp
	subu       $sp, $sp, 32
	#          local_1 = ALLOCATE VCons ;
	li         $a0, 44
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_VCons
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_11 ;
	la         $t0, data_11
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 28 ;
	li         $t0, 28
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 1 ;
	li         $t0, 1
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 1 ;
	li         $t0, 1
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL VCons __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        VCons___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_0 = GETTYPEADDR local_6 ;
	lw         $t1, -28($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_7 = VCALL local_0 init ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG v ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          RETURN local_7 ;
	lw         $v0, -32($fp)
	addu       $sp, $sp, 32
	jr         $ra
VList_print:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = LOAD data_9 ;
	la         $t0, data_9
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_0 out_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
VCons___init__:
	move       $fp, $sp
	subu       $sp, $sp, 28
	#          local_0 = VCALL VList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        VList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          local_1 = ALLOCATE VList ;
	li         $a0, 40
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_VList
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 24 ;
	li         $t0, 24
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 2 ;
	li         $t0, 2
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 1 ;
	li         $t0, 1
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL VList __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        VList___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          SETATTR self cdr local_6 ;
	lw         $t0, -28($fp)
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 28
	jr         $ra
VCons_isNil:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN ;
	li         $v0, 0
	addu       $sp, $sp, 0
	jr         $ra
VCons_head:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = GETATTR self car ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -4($fp)
	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
VCons_tail:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_0 = GETATTR self cdr ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -4($fp)
	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
VCons_init:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          SETATTR self car v ;
	lw         $t0, 4($fp)
	lw         $t1, 8($fp)
	sw         $t0, 20($t1)
	#          SETATTR self cdr rest ;
	lw         $t0, 0($fp)
	lw         $t1, 8($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 8($fp)
	addu       $sp, $sp, 0
	jr         $ra
VCons_print:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          local_1 = GETATTR self car ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = VCALL local_0 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          local_4 = GETATTR self cdr ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -20($fp)
	#          local_3 = GETTYPEADDR local_4 ;
	lw         $t1, -20($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_5 = VCALL local_3 print ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          RETURN local_5 ;
	lw         $v0, -24($fp)
	addu       $sp, $sp, 24
	jr         $ra
Parse___init__:
	move       $fp, $sp
	subu       $sp, $sp, 28
	#          local_0 = ALLOCATE BoolOp ;
	li         $a0, 36
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_BoolOp
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_12 ;
	la         $t0, data_12
	sw         $t0, -8($fp)
	#          SETATTR local_0 @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 20 ;
	li         $t0, 20
	sw         $t0, -12($fp)
	#          SETATTR local_0 @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 14 ;
	li         $t0, 14
	sw         $t0, -16($fp)
	#          SETATTR local_0 @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 14 ;
	li         $t0, 14
	sw         $t0, -20($fp)
	#          SETATTR local_0 @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL BoolOp __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_0 ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        BoolOp___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          SETATTR self boolop local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          local_6 = ALLOCATE String ;
	li         $a0, 1024
	li         $v0, 9
	syscall
	sw         $v0, -28($fp)
	#          SETATTR self rest local_6 ;
	lw         $t0, -28($fp)
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 28
	jr         $ra
Parse_read_input:
	move       $fp, $sp
	subu       $sp, $sp, 112
	#          local_1 = ALLOCATE Graph ;
	li         $a0, 44
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_Graph
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_13 ;
	la         $t0, data_13
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 28 ;
	li         $t0, 28
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 11 ;
	li         $t0, 11
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 11 ;
	li         $t0, 11
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL Graph __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Graph___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          g = local_6 ;
	lw         $t0, -28($fp)
	sw         $t0, -4($fp)
	#          local_8 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -36($fp)
	#          local_9 = VCALL local_8 in_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -36($fp)
	ulw        $t1, 20($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          line = local_9 ;
	lw         $t0, -40($fp)
	sw         $t0, -32($fp)
	#          LABEL label_5 ;
	label_5:

	#          local_11 = GETATTR self boolop ;
	lw         $t0, 0($fp)
	lw         $t1, 20($t0)
	sw         $t1, -48($fp)
	#          local_10 = GETTYPEADDR local_11 ;
	lw         $t1, -48($fp)
	lw         $t0, 8($t1)
	sw         $t0, -44($fp)
	#          local_12 = LOAD data_9 ;
	la         $t0, data_9
	sw         $t0, -52($fp)
	#          local_13 = line == local_12 ;
	lw         $t0, -32($fp)
	lw         $t1, -52($fp)
	li         $v0, 1
	sw         $v0, -56($fp)
	equal_loop_1:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_1
	beqz       $t2, end_loop_1
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_1
	b          end_loop_1
	not_equal_1:

	li         $v0, 0
	sw         $v0, -56($fp)
	end_loop_1:

	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          local_15 = 0 ;
	li         $t0, 0
	sw         $t0, -64($fp)
	#          IF local_14 GOTO label_3 ;
	lw         $t0, -60($fp)
	bnez       $t0, label_3
	#          local_15 = 1 ;
	li         $t0, 1
	sw         $t0, -64($fp)
	#          LABEL label_3 ;
	label_3:

	#          local_16 = LOAD data_14 ;
	la         $t0, data_14
	sw         $t0, -68($fp)
	#          local_17 = line == local_16 ;
	lw         $t0, -32($fp)
	lw         $t1, -68($fp)
	li         $v0, 1
	sw         $v0, -72($fp)
	equal_loop_2:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_2
	beqz       $t2, end_loop_2
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_2
	b          end_loop_2
	not_equal_2:

	li         $v0, 0
	sw         $v0, -72($fp)
	end_loop_2:

	#          local_18 = local_17 ;
	lw         $t0, -72($fp)
	sw         $t0, -76($fp)
	#          local_19 = 0 ;
	li         $t0, 0
	sw         $t0, -80($fp)
	#          IF local_18 GOTO label_4 ;
	lw         $t0, -76($fp)
	bnez       $t0, label_4
	#          local_19 = 1 ;
	li         $t0, 1
	sw         $t0, -80($fp)
	#          LABEL label_4 ;
	label_4:

	#          local_20 = VCALL local_10 and ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_11 ;
	lw         $t0, -48($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_15 ;
	lw         $t0, -64($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_19 ;
	lw         $t0, -80($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -44($fp)
	ulw        $t1, 120($t0)
	jalr       $t1
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -84($fp)
	#          IF local_20 GOTO label_6 ;
	lw         $t0, -84($fp)
	bnez       $t0, label_6
	#          GOTO label_7 ;
	b          label_7
	#          LABEL label_6 ;
	label_6:

	#          local_21 = GETTYPEADDR g ;
	lw         $t1, -4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -88($fp)
	#          local_22 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -92($fp)
	#          local_23 = VCALL local_22 parse_line ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG line ;
	lw         $t0, -32($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -92($fp)
	ulw        $t1, 100($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -96($fp)
	#          local_24 = VCALL local_21 add_vertice ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG g ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_23 ;
	lw         $t0, -96($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -88($fp)
	ulw        $t1, 40($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -100($fp)
	#          local_25 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -104($fp)
	#          local_26 = VCALL local_25 in_string ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -104($fp)
	ulw        $t1, 20($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -108($fp)
	#          line = local_26 ;
	lw         $t0, -108($fp)
	sw         $t0, -32($fp)
	#          GOTO label_5 ;
	b          label_5
	#          LABEL label_7 ;
	label_7:

	#          local_27 = 0 ;
	li         $t0, 0
	sw         $t0, -112($fp)
	#          RETURN g ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 112
	jr         $ra
Parse_parse_line:
	move       $fp, $sp
	subu       $sp, $sp, 152
	#          local_2 = ALLOCATE Vertice ;
	li         $a0, 44
	li         $v0, 9
	syscall
	sw         $v0, -12($fp)
	la         $t0, vt_Vertice
	sw         $t0, 8($v0)
	#          local_3 = LOAD data_10 ;
	la         $t0, data_10
	sw         $t0, -16($fp)
	#          SETATTR local_2 @type local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -12($fp)
	sw         $t0, 0($t1)
	#          local_4 = 28 ;
	li         $t0, 28
	sw         $t0, -20($fp)
	#          SETATTR local_2 @size local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -12($fp)
	sw         $t0, 4($t1)
	#          local_5 = 5 ;
	li         $t0, 5
	sw         $t0, -24($fp)
	#          SETATTR local_2 @order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -12($fp)
	sw         $t0, 12($t1)
	#          local_6 = 5 ;
	li         $t0, 5
	sw         $t0, -28($fp)
	#          SETATTR local_2 @min_order local_6 ;
	lw         $t0, -28($fp)
	lw         $t1, -12($fp)
	sw         $t0, 16($t1)
	#          local_7 = VCALL Vertice __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Vertice___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          local_1 = GETTYPEADDR local_7 ;
	lw         $t1, -32($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_8 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -36($fp)
	#          local_9 = VCALL local_8 a2i ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -36($fp)
	ulw        $t1, 108($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          local_10 = VCALL local_1 init ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_7 ;
	lw         $t0, -32($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_9 ;
	lw         $t0, -40($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -44($fp)
	#          v = local_10 ;
	lw         $t0, -44($fp)
	sw         $t0, -4($fp)
	#          LABEL label_9 ;
	label_9:

	#          local_12 = GETATTR self rest ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -52($fp)
	#          local_13 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_12 ;
	lw         $t0, -52($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -56($fp)
	#          local_14 = local_13 == 0 ;
	lw         $t0, -56($fp)
	li         $t1, 0
	seq        $t0, $t0, $t1
	sw         $t0, -60($fp)
	#          local_15 = local_14 ;
	lw         $t0, -60($fp)
	sw         $t0, -64($fp)
	#          local_16 = 0 ;
	li         $t0, 0
	sw         $t0, -68($fp)
	#          IF local_15 GOTO label_8 ;
	lw         $t0, -64($fp)
	bnez       $t0, label_8
	#          local_16 = 1 ;
	li         $t0, 1
	sw         $t0, -68($fp)
	#          LABEL label_8 ;
	label_8:

	#          IF local_16 GOTO label_10 ;
	lw         $t0, -68($fp)
	bnez       $t0, label_10
	#          GOTO label_11 ;
	b          label_11
	#          LABEL label_10 ;
	label_10:

	#          local_18 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -76($fp)
	#          local_19 = GETATTR self rest ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -80($fp)
	#          local_20 = VCALL local_18 a2i ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_19 ;
	lw         $t0, -80($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -76($fp)
	ulw        $t1, 108($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -84($fp)
	#          succ = local_20 ;
	lw         $t0, -84($fp)
	sw         $t0, -72($fp)
	#          local_22 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -92($fp)
	#          local_23 = GETATTR self rest ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -96($fp)
	#          local_24 = VCALL local_22 a2i ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_23 ;
	lw         $t0, -96($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -92($fp)
	ulw        $t1, 108($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -100($fp)
	#          weight = local_24 ;
	lw         $t0, -100($fp)
	sw         $t0, -88($fp)
	#          local_25 = GETTYPEADDR v ;
	lw         $t1, -4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -104($fp)
	#          local_27 = ALLOCATE Edge ;
	li         $a0, 48
	li         $v0, 9
	syscall
	sw         $v0, -112($fp)
	la         $t0, vt_Edge
	sw         $t0, 8($v0)
	#          local_28 = LOAD data_7 ;
	la         $t0, data_7
	sw         $t0, -116($fp)
	#          SETATTR local_27 @type local_28 ;
	lw         $t0, -116($fp)
	lw         $t1, -112($fp)
	sw         $t0, 0($t1)
	#          local_29 = 32 ;
	li         $t0, 32
	sw         $t0, -120($fp)
	#          SETATTR local_27 @size local_29 ;
	lw         $t0, -120($fp)
	lw         $t1, -112($fp)
	sw         $t0, 4($t1)
	#          local_30 = 8 ;
	li         $t0, 8
	sw         $t0, -124($fp)
	#          SETATTR local_27 @order local_30 ;
	lw         $t0, -124($fp)
	lw         $t1, -112($fp)
	sw         $t0, 12($t1)
	#          local_31 = 8 ;
	li         $t0, 8
	sw         $t0, -128($fp)
	#          SETATTR local_27 @min_order local_31 ;
	lw         $t0, -128($fp)
	lw         $t1, -112($fp)
	sw         $t0, 16($t1)
	#          local_32 = VCALL Edge __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_27 ;
	lw         $t0, -112($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Edge___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -132($fp)
	#          local_26 = GETTYPEADDR local_32 ;
	lw         $t1, -132($fp)
	lw         $t0, 8($t1)
	sw         $t0, -108($fp)
	#          local_33 = GETTYPEADDR v ;
	lw         $t1, -4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -136($fp)
	#          local_34 = VCALL local_33 number ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG v ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -136($fp)
	ulw        $t1, 60($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -140($fp)
	#          local_35 = VCALL local_26 init ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_32 ;
	lw         $t0, -132($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_34 ;
	lw         $t0, -140($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG succ ;
	lw         $t0, -72($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG weight ;
	lw         $t0, -88($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -108($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 16
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -144($fp)
	#          local_36 = VCALL local_25 add_out ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG v ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_35 ;
	lw         $t0, -144($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -104($fp)
	ulw        $t1, 68($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -148($fp)
	#          GOTO label_9 ;
	b          label_9
	#          LABEL label_11 ;
	label_11:

	#          local_37 = 0 ;
	li         $t0, 0
	sw         $t0, -152($fp)
	#          RETURN v ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 152
	jr         $ra
Parse_c2i:
	move       $fp, $sp
	subu       $sp, $sp, 168
	#          local_0 = LOAD data_15 ;
	la         $t0, data_15
	sw         $t0, -4($fp)
	#          local_1 = char == local_0 ;
	lw         $t0, 0($fp)
	lw         $t1, -4($fp)
	li         $v0, 1
	sw         $v0, -8($fp)
	equal_loop_3:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_3
	beqz       $t2, end_loop_3
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_3
	b          end_loop_3
	not_equal_3:

	li         $v0, 0
	sw         $v0, -8($fp)
	end_loop_3:

	#          local_2 = local_1 ;
	lw         $t0, -8($fp)
	sw         $t0, -12($fp)
	#          IF local_2 GOTO label_30 ;
	lw         $t0, -12($fp)
	bnez       $t0, label_30
	#          local_3 = LOAD data_16 ;
	la         $t0, data_16
	sw         $t0, -16($fp)
	#          local_4 = char == local_3 ;
	lw         $t0, 0($fp)
	lw         $t1, -16($fp)
	li         $v0, 1
	sw         $v0, -20($fp)
	equal_loop_4:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_4
	beqz       $t2, end_loop_4
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_4
	b          end_loop_4
	not_equal_4:

	li         $v0, 0
	sw         $v0, -20($fp)
	end_loop_4:

	#          local_5 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -24($fp)
	#          IF local_5 GOTO label_28 ;
	lw         $t0, -24($fp)
	bnez       $t0, label_28
	#          local_6 = LOAD data_17 ;
	la         $t0, data_17
	sw         $t0, -28($fp)
	#          local_7 = char == local_6 ;
	lw         $t0, 0($fp)
	lw         $t1, -28($fp)
	li         $v0, 1
	sw         $v0, -32($fp)
	equal_loop_5:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_5
	beqz       $t2, end_loop_5
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_5
	b          end_loop_5
	not_equal_5:

	li         $v0, 0
	sw         $v0, -32($fp)
	end_loop_5:

	#          local_8 = local_7 ;
	lw         $t0, -32($fp)
	sw         $t0, -36($fp)
	#          IF local_8 GOTO label_26 ;
	lw         $t0, -36($fp)
	bnez       $t0, label_26
	#          local_9 = LOAD data_18 ;
	la         $t0, data_18
	sw         $t0, -40($fp)
	#          local_10 = char == local_9 ;
	lw         $t0, 0($fp)
	lw         $t1, -40($fp)
	li         $v0, 1
	sw         $v0, -44($fp)
	equal_loop_6:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_6
	beqz       $t2, end_loop_6
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_6
	b          end_loop_6
	not_equal_6:

	li         $v0, 0
	sw         $v0, -44($fp)
	end_loop_6:

	#          local_11 = local_10 ;
	lw         $t0, -44($fp)
	sw         $t0, -48($fp)
	#          IF local_11 GOTO label_24 ;
	lw         $t0, -48($fp)
	bnez       $t0, label_24
	#          local_12 = LOAD data_19 ;
	la         $t0, data_19
	sw         $t0, -52($fp)
	#          local_13 = char == local_12 ;
	lw         $t0, 0($fp)
	lw         $t1, -52($fp)
	li         $v0, 1
	sw         $v0, -56($fp)
	equal_loop_7:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_7
	beqz       $t2, end_loop_7
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_7
	b          end_loop_7
	not_equal_7:

	li         $v0, 0
	sw         $v0, -56($fp)
	end_loop_7:

	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          IF local_14 GOTO label_22 ;
	lw         $t0, -60($fp)
	bnez       $t0, label_22
	#          local_15 = LOAD data_20 ;
	la         $t0, data_20
	sw         $t0, -64($fp)
	#          local_16 = char == local_15 ;
	lw         $t0, 0($fp)
	lw         $t1, -64($fp)
	li         $v0, 1
	sw         $v0, -68($fp)
	equal_loop_8:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_8
	beqz       $t2, end_loop_8
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_8
	b          end_loop_8
	not_equal_8:

	li         $v0, 0
	sw         $v0, -68($fp)
	end_loop_8:

	#          local_17 = local_16 ;
	lw         $t0, -68($fp)
	sw         $t0, -72($fp)
	#          IF local_17 GOTO label_20 ;
	lw         $t0, -72($fp)
	bnez       $t0, label_20
	#          local_18 = LOAD data_21 ;
	la         $t0, data_21
	sw         $t0, -76($fp)
	#          local_19 = char == local_18 ;
	lw         $t0, 0($fp)
	lw         $t1, -76($fp)
	li         $v0, 1
	sw         $v0, -80($fp)
	equal_loop_9:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_9
	beqz       $t2, end_loop_9
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_9
	b          end_loop_9
	not_equal_9:

	li         $v0, 0
	sw         $v0, -80($fp)
	end_loop_9:

	#          local_20 = local_19 ;
	lw         $t0, -80($fp)
	sw         $t0, -84($fp)
	#          IF local_20 GOTO label_18 ;
	lw         $t0, -84($fp)
	bnez       $t0, label_18
	#          local_21 = LOAD data_22 ;
	la         $t0, data_22
	sw         $t0, -88($fp)
	#          local_22 = char == local_21 ;
	lw         $t0, 0($fp)
	lw         $t1, -88($fp)
	li         $v0, 1
	sw         $v0, -92($fp)
	equal_loop_10:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_10
	beqz       $t2, end_loop_10
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_10
	b          end_loop_10
	not_equal_10:

	li         $v0, 0
	sw         $v0, -92($fp)
	end_loop_10:

	#          local_23 = local_22 ;
	lw         $t0, -92($fp)
	sw         $t0, -96($fp)
	#          IF local_23 GOTO label_16 ;
	lw         $t0, -96($fp)
	bnez       $t0, label_16
	#          local_24 = LOAD data_23 ;
	la         $t0, data_23
	sw         $t0, -100($fp)
	#          local_25 = char == local_24 ;
	lw         $t0, 0($fp)
	lw         $t1, -100($fp)
	li         $v0, 1
	sw         $v0, -104($fp)
	equal_loop_11:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_11
	beqz       $t2, end_loop_11
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_11
	b          end_loop_11
	not_equal_11:

	li         $v0, 0
	sw         $v0, -104($fp)
	end_loop_11:

	#          local_26 = local_25 ;
	lw         $t0, -104($fp)
	sw         $t0, -108($fp)
	#          IF local_26 GOTO label_14 ;
	lw         $t0, -108($fp)
	bnez       $t0, label_14
	#          local_27 = LOAD data_24 ;
	la         $t0, data_24
	sw         $t0, -112($fp)
	#          local_28 = char == local_27 ;
	lw         $t0, 0($fp)
	lw         $t1, -112($fp)
	li         $v0, 1
	sw         $v0, -116($fp)
	equal_loop_12:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_12
	beqz       $t2, end_loop_12
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_12
	b          end_loop_12
	not_equal_12:

	li         $v0, 0
	sw         $v0, -116($fp)
	end_loop_12:

	#          local_29 = local_28 ;
	lw         $t0, -116($fp)
	sw         $t0, -120($fp)
	#          IF local_29 GOTO label_12 ;
	lw         $t0, -120($fp)
	bnez       $t0, label_12
	#          local_30 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -124($fp)
	#          local_31 = VCALL local_30 abort ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -124($fp)
	ulw        $t1, 0($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -128($fp)
	#          local_32 = 0 ;
	li         $t0, 0
	sw         $t0, -132($fp)
	#          GOTO label_13 ;
	b          label_13
	#          LABEL label_12 ;
	label_12:

	#          local_32 = 9 ;
	li         $t0, 9
	sw         $t0, -132($fp)
	#          LABEL label_13 ;
	label_13:

	#          local_33 = local_32 ;
	lw         $t0, -132($fp)
	sw         $t0, -136($fp)
	#          GOTO label_15 ;
	b          label_15
	#          LABEL label_14 ;
	label_14:

	#          local_33 = 8 ;
	li         $t0, 8
	sw         $t0, -136($fp)
	#          LABEL label_15 ;
	label_15:

	#          local_34 = local_33 ;
	lw         $t0, -136($fp)
	sw         $t0, -140($fp)
	#          GOTO label_17 ;
	b          label_17
	#          LABEL label_16 ;
	label_16:

	#          local_34 = 7 ;
	li         $t0, 7
	sw         $t0, -140($fp)
	#          LABEL label_17 ;
	label_17:

	#          local_35 = local_34 ;
	lw         $t0, -140($fp)
	sw         $t0, -144($fp)
	#          GOTO label_19 ;
	b          label_19
	#          LABEL label_18 ;
	label_18:

	#          local_35 = 6 ;
	li         $t0, 6
	sw         $t0, -144($fp)
	#          LABEL label_19 ;
	label_19:

	#          local_36 = local_35 ;
	lw         $t0, -144($fp)
	sw         $t0, -148($fp)
	#          GOTO label_21 ;
	b          label_21
	#          LABEL label_20 ;
	label_20:

	#          local_36 = 5 ;
	li         $t0, 5
	sw         $t0, -148($fp)
	#          LABEL label_21 ;
	label_21:

	#          local_37 = local_36 ;
	lw         $t0, -148($fp)
	sw         $t0, -152($fp)
	#          GOTO label_23 ;
	b          label_23
	#          LABEL label_22 ;
	label_22:

	#          local_37 = 4 ;
	li         $t0, 4
	sw         $t0, -152($fp)
	#          LABEL label_23 ;
	label_23:

	#          local_38 = local_37 ;
	lw         $t0, -152($fp)
	sw         $t0, -156($fp)
	#          GOTO label_25 ;
	b          label_25
	#          LABEL label_24 ;
	label_24:

	#          local_38 = 3 ;
	li         $t0, 3
	sw         $t0, -156($fp)
	#          LABEL label_25 ;
	label_25:

	#          local_39 = local_38 ;
	lw         $t0, -156($fp)
	sw         $t0, -160($fp)
	#          GOTO label_27 ;
	b          label_27
	#          LABEL label_26 ;
	label_26:

	#          local_39 = 2 ;
	li         $t0, 2
	sw         $t0, -160($fp)
	#          LABEL label_27 ;
	label_27:

	#          local_40 = local_39 ;
	lw         $t0, -160($fp)
	sw         $t0, -164($fp)
	#          GOTO label_29 ;
	b          label_29
	#          LABEL label_28 ;
	label_28:

	#          local_40 = 1 ;
	li         $t0, 1
	sw         $t0, -164($fp)
	#          LABEL label_29 ;
	label_29:

	#          local_41 = local_40 ;
	lw         $t0, -164($fp)
	sw         $t0, -168($fp)
	#          GOTO label_31 ;
	b          label_31
	#          LABEL label_30 ;
	label_30:

	#          local_41 = 0 ;
	li         $t0, 0
	sw         $t0, -168($fp)
	#          LABEL label_31 ;
	label_31:

	#          RETURN local_41 ;
	lw         $v0, -168($fp)
	addu       $sp, $sp, 168
	jr         $ra
Parse_a2i:
	move       $fp, $sp
	subu       $sp, $sp, 136
	#          local_1 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          local_2 = local_1 == 0 ;
	lw         $t0, -8($fp)
	li         $t1, 0
	seq        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          local_3 = local_2 ;
	lw         $t0, -12($fp)
	sw         $t0, -16($fp)
	#          IF local_3 GOTO label_36 ;
	lw         $t0, -16($fp)
	bnez       $t0, label_36
	#          local_5 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 0 ;
	li         $t0, 0
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          local_6 = LOAD data_25 ;
	la         $t0, data_25
	sw         $t0, -28($fp)
	#          local_7 = local_5 == local_6 ;
	lw         $t0, -24($fp)
	lw         $t1, -28($fp)
	li         $v0, 1
	sw         $v0, -32($fp)
	equal_loop_13:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_13
	beqz       $t2, end_loop_13
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_13
	b          end_loop_13
	not_equal_13:

	li         $v0, 0
	sw         $v0, -32($fp)
	end_loop_13:

	#          local_8 = local_7 ;
	lw         $t0, -32($fp)
	sw         $t0, -36($fp)
	#          IF local_8 GOTO label_34 ;
	lw         $t0, -36($fp)
	bnez       $t0, label_34
	#          local_18 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 0 ;
	li         $t0, 0
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -76($fp)
	#          local_19 = LOAD data_26 ;
	la         $t0, data_26
	sw         $t0, -80($fp)
	#          local_20 = local_18 == local_19 ;
	lw         $t0, -76($fp)
	lw         $t1, -80($fp)
	li         $v0, 1
	sw         $v0, -84($fp)
	equal_loop_14:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_14
	beqz       $t2, end_loop_14
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_14
	b          end_loop_14
	not_equal_14:

	li         $v0, 0
	sw         $v0, -84($fp)
	end_loop_14:

	#          local_21 = local_20 ;
	lw         $t0, -84($fp)
	sw         $t0, -88($fp)
	#          IF local_21 GOTO label_32 ;
	lw         $t0, -88($fp)
	bnez       $t0, label_32
	#          local_29 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -120($fp)
	#          local_30 = VCALL local_29 a2i_aux ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -120($fp)
	ulw        $t1, 112($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -124($fp)
	#          local_31 = local_30 ;
	lw         $t0, -124($fp)
	sw         $t0, -128($fp)
	#          GOTO label_33 ;
	b          label_33
	#          LABEL label_32 ;
	label_32:

	#          local_22 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -92($fp)
	#          local_25 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -104($fp)
	#          local_26 = local_25 - 1 ;
	lw         $t0, -104($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -108($fp)
	#          local_27 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_26 ;
	lw         $t0, -108($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -112($fp)
	#          local_28 = VCALL local_22 a2i ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_27 ;
	lw         $t0, -112($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -92($fp)
	ulw        $t1, 108($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -116($fp)
	#          local_31 = local_28 ;
	lw         $t0, -116($fp)
	sw         $t0, -128($fp)
	#          LABEL label_33 ;
	label_33:

	#          local_32 = local_31 ;
	lw         $t0, -128($fp)
	sw         $t0, -132($fp)
	#          GOTO label_35 ;
	b          label_35
	#          LABEL label_34 ;
	label_34:

	#          local_9 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -40($fp)
	#          local_12 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -52($fp)
	#          local_13 = local_12 - 1 ;
	lw         $t0, -52($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -56($fp)
	#          local_14 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_13 ;
	lw         $t0, -56($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -60($fp)
	#          local_15 = VCALL local_9 a2i_aux ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_14 ;
	lw         $t0, -60($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -40($fp)
	ulw        $t1, 112($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -64($fp)
	#          local_16 = ~ local_15
	lw         $t0, -64($fp)
	neg        $t0, $t0
	sw         $t0, -68($fp)
	#          local_32 = local_16 ;
	lw         $t0, -68($fp)
	sw         $t0, -132($fp)
	#          LABEL label_35 ;
	label_35:

	#          local_33 = local_32 ;
	lw         $t0, -132($fp)
	sw         $t0, -136($fp)
	#          GOTO label_37 ;
	b          label_37
	#          LABEL label_36 ;
	label_36:

	#          local_33 = 0 ;
	li         $t0, 0
	sw         $t0, -136($fp)
	#          LABEL label_37 ;
	label_37:

	#          RETURN local_33 ;
	lw         $v0, -136($fp)
	addu       $sp, $sp, 136
	jr         $ra
Parse_a2i_aux:
	move       $fp, $sp
	subu       $sp, $sp, 172
	#          int = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          local_3 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          j = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -8($fp)
	#          i = 0 ;
	li         $t0, 0
	sw         $t0, -20($fp)
	#          LABEL label_44 ;
	label_44:

	#          local_5 = i < j ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -24($fp)
	#          IF local_5 GOTO label_45 ;
	lw         $t0, -24($fp)
	bnez       $t0, label_45
	#          GOTO label_46 ;
	b          label_46
	#          LABEL label_45 ;
	label_45:

	#          local_8 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG i ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -36($fp)
	#          c = local_8 ;
	lw         $t0, -36($fp)
	sw         $t0, -28($fp)
	#          local_9 = LOAD data_26 ;
	la         $t0, data_26
	sw         $t0, -40($fp)
	#          local_10 = c == local_9 ;
	lw         $t0, -28($fp)
	lw         $t1, -40($fp)
	li         $v0, 1
	sw         $v0, -44($fp)
	equal_loop_15:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_15
	beqz       $t2, end_loop_15
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_15
	b          end_loop_15
	not_equal_15:

	li         $v0, 0
	sw         $v0, -44($fp)
	end_loop_15:

	#          local_11 = local_10 ;
	lw         $t0, -44($fp)
	sw         $t0, -48($fp)
	#          IF local_11 GOTO label_42 ;
	lw         $t0, -48($fp)
	bnez       $t0, label_42
	#          local_19 = LOAD data_5 ;
	la         $t0, data_5
	sw         $t0, -80($fp)
	#          local_20 = c == local_19 ;
	lw         $t0, -28($fp)
	lw         $t1, -80($fp)
	li         $v0, 1
	sw         $v0, -84($fp)
	equal_loop_16:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_16
	beqz       $t2, end_loop_16
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_16
	b          end_loop_16
	not_equal_16:

	li         $v0, 0
	sw         $v0, -84($fp)
	end_loop_16:

	#          local_21 = local_20 ;
	lw         $t0, -84($fp)
	sw         $t0, -88($fp)
	#          IF local_21 GOTO label_40 ;
	lw         $t0, -88($fp)
	bnez       $t0, label_40
	#          local_29 = int * 10 ;
	lw         $t0, -4($fp)
	li         $t1, 10
	mul        $t0, $t0, $t1
	sw         $t0, -120($fp)
	#          local_30 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -124($fp)
	#          local_32 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG i ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -132($fp)
	#          local_33 = VCALL local_30 c2i ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_32 ;
	lw         $t0, -132($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -124($fp)
	ulw        $t1, 104($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -136($fp)
	#          local_34 = local_29 + local_33 ;
	lw         $t0, -120($fp)
	lw         $t1, -136($fp)
	add        $t0, $t0, $t1
	sw         $t0, -140($fp)
	#          int = local_34 ;
	lw         $t0, -140($fp)
	sw         $t0, -4($fp)
	#          local_35 = i + 1 ;
	lw         $t0, -20($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -144($fp)
	#          i = local_35 ;
	lw         $t0, -144($fp)
	sw         $t0, -20($fp)
	#          local_36 = i == j ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -148($fp)
	#          local_37 = local_36 ;
	lw         $t0, -148($fp)
	sw         $t0, -152($fp)
	#          IF local_37 GOTO label_38 ;
	lw         $t0, -152($fp)
	bnez       $t0, label_38
	#          local_38 = LOAD data_14 ;
	la         $t0, data_14
	sw         $t0, -156($fp)
	#          local_39 = local_38 ;
	lw         $t0, -156($fp)
	sw         $t0, -160($fp)
	#          GOTO label_39 ;
	b          label_39
	#          LABEL label_38 ;
	label_38:

	#          local_38 = LOAD data_14 ;
	la         $t0, data_14
	sw         $t0, -156($fp)
	#          SETATTR self rest local_38 ;
	lw         $t0, -156($fp)
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          local_39 = local_38 ;
	lw         $t0, -156($fp)
	sw         $t0, -160($fp)
	#          LABEL label_39 ;
	label_39:

	#          local_40 = local_39 ;
	lw         $t0, -160($fp)
	sw         $t0, -164($fp)
	#          GOTO label_41 ;
	b          label_41
	#          LABEL label_40 ;
	label_40:

	#          local_23 = i + 1 ;
	lw         $t0, -20($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -96($fp)
	#          local_25 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -104($fp)
	#          local_26 = local_25 - i ;
	lw         $t0, -104($fp)
	lw         $t1, -20($fp)
	sub        $t0, $t0, $t1
	sw         $t0, -108($fp)
	#          local_27 = local_26 - 1 ;
	lw         $t0, -108($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -112($fp)
	#          local_28 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_23 ;
	lw         $t0, -96($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_27 ;
	lw         $t0, -112($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -116($fp)
	#          SETATTR self rest local_28 ;
	lw         $t0, -116($fp)
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          i = j ;
	lw         $t0, -8($fp)
	sw         $t0, -20($fp)
	#          local_40 = i ;
	lw         $t0, -20($fp)
	sw         $t0, -164($fp)
	#          LABEL label_41 ;
	label_41:

	#          local_41 = local_40 ;
	lw         $t0, -164($fp)
	sw         $t0, -168($fp)
	#          GOTO label_43 ;
	b          label_43
	#          LABEL label_42 ;
	label_42:

	#          local_13 = i + 1 ;
	lw         $t0, -20($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -56($fp)
	#          local_15 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -64($fp)
	#          local_16 = local_15 - i ;
	lw         $t0, -64($fp)
	lw         $t1, -20($fp)
	sub        $t0, $t0, $t1
	sw         $t0, -68($fp)
	#          local_17 = local_16 - 1 ;
	lw         $t0, -68($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -72($fp)
	#          local_18 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG s ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_13 ;
	lw         $t0, -56($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_17 ;
	lw         $t0, -72($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -76($fp)
	#          SETATTR self rest local_18 ;
	lw         $t0, -76($fp)
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          i = j ;
	lw         $t0, -8($fp)
	sw         $t0, -20($fp)
	#          local_41 = i ;
	lw         $t0, -20($fp)
	sw         $t0, -168($fp)
	#          LABEL label_43 ;
	label_43:

	#          GOTO label_44 ;
	b          label_44
	#          LABEL label_46 ;
	label_46:

	#          local_42 = 0 ;
	li         $t0, 0
	sw         $t0, -172($fp)
	#          RETURN int ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 172
	jr         $ra
Main___init__:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_0 = VCALL Parse __init__ ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Parse___init__
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          local_1 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_1 read_input ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 96($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          SETATTR self g local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, 0($fp)
	sw         $t0, 28($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 12
	jr         $ra
Main_main:
	move       $fp, $sp
	subu       $sp, $sp, 24
	#          local_1 = GETATTR self g ;
	lw         $t0, 0($fp)
	lw         $t1, 28($t0)
	sw         $t1, -8($fp)
	#          local_0 = GETTYPEADDR local_1 ;
	lw         $t1, -8($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_2 = VCALL local_0 print_V ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 48($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          local_4 = GETATTR self g ;
	lw         $t0, 0($fp)
	lw         $t1, 28($t0)
	sw         $t1, -20($fp)
	#          local_3 = GETTYPEADDR local_4 ;
	lw         $t1, -20($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_5 = VCALL local_3 print_E ;
	subu       $sp, $sp, 8
	sw         $ra, 0($sp)
	sw         $fp, 4($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 44($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $ra, 0($sp)
	lw         $fp, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          RETURN local_5 ;
	lw         $v0, -24($fp)
	addu       $sp, $sp, 24
	jr         $ra
BoolOp___init__:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 0
	jr         $ra
BoolOp_and:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          IF b1 GOTO label_47 ;
	lw         $t0, 4($fp)
	bnez       $t0, label_47
	#          local_0 = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          GOTO label_48 ;
	b          label_48
	#          LABEL label_47 ;
	label_47:

	#          local_0 = b2 ;
	lw         $t0, 0($fp)
	sw         $t0, -4($fp)
	#          LABEL label_48 ;
	label_48:

	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
BoolOp_or:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          IF b1 GOTO label_49 ;
	lw         $t0, 4($fp)
	bnez       $t0, label_49
	#          local_0 = b2 ;
	lw         $t0, 0($fp)
	sw         $t0, -4($fp)
	#          GOTO label_50 ;
	b          label_50
	#          LABEL label_49 ;
	label_49:

	#          local_0 = 1 ;
	li         $t0, 1
	sw         $t0, -4($fp)
	#          LABEL label_50 ;
	label_50:

	#          RETURN local_0 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra

.data
	data_1:
		.asciiz    "Main"
	data_2:
		.asciiz    "VList"
	data_3:
		.asciiz    "EList"
	data_4:
		.asciiz    " ("
	data_5:
		.asciiz    ","
	data_6:
		.asciiz    ")"
	data_7:
		.asciiz    "Edge"
	data_8:
		.asciiz    "ECons"
	data_9:
		.asciiz    "\n"
	data_10:
		.asciiz    "Vertice"
	data_11:
		.asciiz    "VCons"
	data_12:
		.asciiz    "BoolOp"
	data_13:
		.asciiz    "Graph"
	data_14:
		.asciiz    ""
	data_15:
		.asciiz    "0"
	data_16:
		.asciiz    "1"
	data_17:
		.asciiz    "2"
	data_18:
		.asciiz    "3"
	data_19:
		.asciiz    "4"
	data_20:
		.asciiz    "5"
	data_21:
		.asciiz    "6"
	data_22:
		.asciiz    "7"
	data_23:
		.asciiz    "8"
	data_24:
		.asciiz    "9"
	data_25:
		.asciiz    "-"
	data_26:
		.asciiz    " "
	data_27:
		.asciiz    "Bool"
	data_28:
		.asciiz    "Int"
	data_29:
		.asciiz    "String"
	data_abort:
		.asciiz    "Abort called from class "
	new_line:
		.asciiz    "\n"
	vt_Object:
		.space     628
	vt_IO:
		.space     628
	vt_Int:
		.space     628
	vt_String:
		.space     628
	vt_Bool:
		.space     628
	vt_Graph:
		.space     628
	vt_Vertice:
		.space     628
	vt_Edge:
		.space     628
	vt_EList:
		.space     628
	vt_ECons:
		.space     628
	vt_VList:
		.space     628
	vt_VCons:
		.space     628
	vt_Parse:
		.space     628
	vt_Main:
		.space     628
	vt_BoolOp:
		.space     628
	abort_String:
		.asciiz    "String"
	abort_Int:
		.asciiz    "Int"
	abort_Bool:
		.asciiz    "Bool"
