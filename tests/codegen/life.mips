
.text
main:
	move       $fp, $sp
	subu       $sp, $sp, 28
	la         $t0, Object_abort
	usw        $t0, vt_Object+0
	la         $t0, Object_type_name
	usw        $t0, vt_Object+4
	la         $t0, Object_copy
	usw        $t0, vt_Object+8
	la         $t0, Object_abort
	usw        $t0, vt_IO+0
	la         $t0, Object_type_name
	usw        $t0, vt_IO+4
	la         $t0, Object_copy
	usw        $t0, vt_IO+8
	la         $t0, IO_out_string
	usw        $t0, vt_IO+12
	la         $t0, IO_out_int
	usw        $t0, vt_IO+16
	la         $t0, IO_in_string
	usw        $t0, vt_IO+20
	la         $t0, IO_in_int
	usw        $t0, vt_IO+24
	la         $t0, Int_abort
	usw        $t0, vt_Int+0
	la         $t0, Int_type_name
	usw        $t0, vt_Int+4
	la         $t0, Object_copy
	usw        $t0, vt_Int+8
	la         $t0, String_abort
	usw        $t0, vt_String+0
	la         $t0, String_type_name
	usw        $t0, vt_String+4
	la         $t0, Object_copy
	usw        $t0, vt_String+8
	la         $t0, String_length
	usw        $t0, vt_String+28
	la         $t0, String_concat
	usw        $t0, vt_String+32
	la         $t0, String_substr
	usw        $t0, vt_String+36
	la         $t0, Bool_abort
	usw        $t0, vt_Bool+0
	la         $t0, Bool_type_name
	usw        $t0, vt_Bool+4
	la         $t0, Object_copy
	usw        $t0, vt_Bool+8
	la         $t0, Object_abort
	usw        $t0, vt_Board+0
	la         $t0, Object_type_name
	usw        $t0, vt_Board+4
	la         $t0, Object_copy
	usw        $t0, vt_Board+8
	la         $t0, IO_out_string
	usw        $t0, vt_Board+12
	la         $t0, IO_out_int
	usw        $t0, vt_Board+16
	la         $t0, IO_in_string
	usw        $t0, vt_Board+20
	la         $t0, IO_in_int
	usw        $t0, vt_Board+24
	la         $t0, Board_size_of_board
	usw        $t0, vt_Board+40
	la         $t0, Board_board_init
	usw        $t0, vt_Board+44
	la         $t0, Board___init__
	usw        $t0, vt_Board+48
	la         $t0, Object_abort
	usw        $t0, vt_CellularAutomaton+0
	la         $t0, Object_type_name
	usw        $t0, vt_CellularAutomaton+4
	la         $t0, Object_copy
	usw        $t0, vt_CellularAutomaton+8
	la         $t0, IO_out_string
	usw        $t0, vt_CellularAutomaton+12
	la         $t0, IO_out_int
	usw        $t0, vt_CellularAutomaton+16
	la         $t0, IO_in_string
	usw        $t0, vt_CellularAutomaton+20
	la         $t0, IO_in_int
	usw        $t0, vt_CellularAutomaton+24
	la         $t0, Board_size_of_board
	usw        $t0, vt_CellularAutomaton+40
	la         $t0, Board_board_init
	usw        $t0, vt_CellularAutomaton+44
	la         $t0, CellularAutomaton_init
	usw        $t0, vt_CellularAutomaton+52
	la         $t0, CellularAutomaton_print
	usw        $t0, vt_CellularAutomaton+56
	la         $t0, CellularAutomaton_num_cells
	usw        $t0, vt_CellularAutomaton+60
	la         $t0, CellularAutomaton_cell
	usw        $t0, vt_CellularAutomaton+64
	la         $t0, CellularAutomaton_north
	usw        $t0, vt_CellularAutomaton+68
	la         $t0, CellularAutomaton_south
	usw        $t0, vt_CellularAutomaton+72
	la         $t0, CellularAutomaton_east
	usw        $t0, vt_CellularAutomaton+76
	la         $t0, CellularAutomaton_west
	usw        $t0, vt_CellularAutomaton+80
	la         $t0, CellularAutomaton_northwest
	usw        $t0, vt_CellularAutomaton+84
	la         $t0, CellularAutomaton_northeast
	usw        $t0, vt_CellularAutomaton+88
	la         $t0, CellularAutomaton_southeast
	usw        $t0, vt_CellularAutomaton+92
	la         $t0, CellularAutomaton_southwest
	usw        $t0, vt_CellularAutomaton+96
	la         $t0, CellularAutomaton_neighbors
	usw        $t0, vt_CellularAutomaton+100
	la         $t0, CellularAutomaton_cell_at_next_evolution
	usw        $t0, vt_CellularAutomaton+104
	la         $t0, CellularAutomaton_evolve
	usw        $t0, vt_CellularAutomaton+108
	la         $t0, CellularAutomaton_option
	usw        $t0, vt_CellularAutomaton+112
	la         $t0, CellularAutomaton_prompt
	usw        $t0, vt_CellularAutomaton+116
	la         $t0, CellularAutomaton_prompt2
	usw        $t0, vt_CellularAutomaton+120
	la         $t0, CellularAutomaton___init__
	usw        $t0, vt_CellularAutomaton+48
	la         $t0, Object_abort
	usw        $t0, vt_Main+0
	la         $t0, Object_type_name
	usw        $t0, vt_Main+4
	la         $t0, Object_copy
	usw        $t0, vt_Main+8
	la         $t0, IO_out_string
	usw        $t0, vt_Main+12
	la         $t0, IO_out_int
	usw        $t0, vt_Main+16
	la         $t0, IO_in_string
	usw        $t0, vt_Main+20
	la         $t0, IO_in_int
	usw        $t0, vt_Main+24
	la         $t0, Board_size_of_board
	usw        $t0, vt_Main+40
	la         $t0, Board_board_init
	usw        $t0, vt_Main+44
	la         $t0, CellularAutomaton_init
	usw        $t0, vt_Main+52
	la         $t0, CellularAutomaton_print
	usw        $t0, vt_Main+56
	la         $t0, CellularAutomaton_num_cells
	usw        $t0, vt_Main+60
	la         $t0, CellularAutomaton_cell
	usw        $t0, vt_Main+64
	la         $t0, CellularAutomaton_north
	usw        $t0, vt_Main+68
	la         $t0, CellularAutomaton_south
	usw        $t0, vt_Main+72
	la         $t0, CellularAutomaton_east
	usw        $t0, vt_Main+76
	la         $t0, CellularAutomaton_west
	usw        $t0, vt_Main+80
	la         $t0, CellularAutomaton_northwest
	usw        $t0, vt_Main+84
	la         $t0, CellularAutomaton_northeast
	usw        $t0, vt_Main+88
	la         $t0, CellularAutomaton_southeast
	usw        $t0, vt_Main+92
	la         $t0, CellularAutomaton_southwest
	usw        $t0, vt_Main+96
	la         $t0, CellularAutomaton_neighbors
	usw        $t0, vt_Main+100
	la         $t0, CellularAutomaton_cell_at_next_evolution
	usw        $t0, vt_Main+104
	la         $t0, CellularAutomaton_evolve
	usw        $t0, vt_Main+108
	la         $t0, CellularAutomaton_option
	usw        $t0, vt_Main+112
	la         $t0, CellularAutomaton_prompt
	usw        $t0, vt_Main+116
	la         $t0, CellularAutomaton_prompt2
	usw        $t0, vt_Main+120
	la         $t0, Main_main
	usw        $t0, vt_Main+124
	la         $t0, Main___init__
	usw        $t0, vt_Main+48
	#          self = ALLOCATE Main ;
	li         $a0, 56
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	la         $t0, vt_Main
	sw         $t0, 8($v0)
	#          local_1 = LOAD data_1 ;
	la         $t0, data_1
	sw         $t0, -8($fp)
	#          SETATTR self @type local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, -4($fp)
	sw         $t0, 0($t1)
	#          local_2 = 40 ;
	li         $t0, 40
	sw         $t0, -12($fp)
	#          SETATTR self @size local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -4($fp)
	sw         $t0, 4($t1)
	#          local_3 = 2 ;
	li         $t0, 2
	sw         $t0, -16($fp)
	#          SETATTR self @order local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -4($fp)
	sw         $t0, 12($t1)
	#          local_4 = 2 ;
	li         $t0, 2
	sw         $t0, -20($fp)
	#          SETATTR self @min_order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -4($fp)
	sw         $t0, 16($t1)
	#          local_5 = VCALL Main __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Main___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          main_result = VCALL Main main ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Main_main
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          RETURN main_result ;
	lw         $v0, -28($fp)
	addu       $sp, $sp, 28
	li         $v0, 10
	syscall
IO_out_int:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          PRINT int ;
	lw         $a0, 0($fp)
	li         $v0, 1
	syscall
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
IO_out_string:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          PRINT str ;
	lw         $a0, 0($fp)
	li         $v0, 4
	syscall
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 0
	jr         $ra
IO_in_string:
	move       $fp, $sp
	subu       $sp, $sp, 4
	li         $a0, 1024
	li         $v0, 9
	syscall
	move       $a0, $v0
	move       $t3, $v0
	li         $a1, 1024
	li         $v0, 8
	syscall
	remove_nl_loop:

	lb         $t0, ($a0)
	beqz       $t0, end_loop
	la         $t1, new_line
	lb         $t2, ($t1)
	beq        $t0, $t2, end_loop
	addu       $a0, $a0, 1
	b          remove_nl_loop
	end_loop:

	sb         $zero, ($a0)
	sw         $t3, -4($fp)
	#          RETURN read_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
IO_in_int:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          int = READINT ;
	li         $v0, 5
	syscall
	sw         $v0, -4($fp)
	#          RETURN int ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          type = TYPEOF self ;
	lw         $t0, 0($fp)
	lw         $t1, ($t0)
	sw         $t1, -4($fp)
	#          RETURN type ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_copy:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          copy = COPY self ;
	lw         $a0, 8($fp)
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	addu       $t1, $fp, 0
	addu       $t2, $fp, -4
	copy_loop:

	lw         $t0, ($t1)
	sw         $t0, ($t2)
	addu       $t1, $t1, 4
	addu       $t2, $t2, 4
	subu       $a0, $a0, 4
	beqz       $a0, end_copy_loop
	b          copy_loop
	end_copy_loop:

	#          RETURN copy ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_length:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          len_result = LENGTH self ;
	lw         $t2, 0($fp)
	li         $t1, 0
	length_loop:

	lb         $t0, ($t2)
	beqz       $t0, end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          length_loop
	end_length_loop:

	sw         $t1, -4($fp)
	#          RETURN len_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_concat:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          concat_result = CONCAT self key ;
	lw         $t2, 4($fp)
	li         $t1, 0
	concat_a_length_loop:

	lb         $t0, ($t2)
	beqz       $t0, concat_a_end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          concat_a_length_loop
	concat_a_end_length_loop:

	lw         $t2, 0($fp)
	concat_b_length_loop:

	lb         $t0, ($t2)
	beqz       $t0, concat_b_end_length_loop
	addu       $t2, $t2, 1
	addu       $t1, $t1, 1
	b          concat_b_length_loop
	concat_b_end_length_loop:

	addu       $a0, $t1, 1
	li         $v0, 9
	syscall
	move       $t0, $v0
	lw         $t1, 4($fp)
	lw         $t2, 0($fp)
	concat_loop_a:

	lb         $a0, ($t1)
	beqz       $a0, concat_loop_b
	sb         $a0, ($t0)
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          concat_loop_a
	concat_loop_b:

	lb         $a0, ($t2)
	beqz       $a0, end_concat
	sb         $a0, ($t0)
	addu       $t0, $t0, 1
	addu       $t2, $t2, 1
	b          concat_loop_b
	end_concat:

	sb         $zero, ($t0)
	sw         $v0, -4($fp)
	#          RETURN concat_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_substr:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          substring_result = SUBSTRING self i l;
	lw         $t0, 8($fp)
	lw         $a0, 0($fp)
	addu       $a0, $a0, 1
	li         $v0, 9
	syscall
	move       $t1, $v0
	lw         $t4, 4($fp)
	lw         $t2, 0($fp)
	addu       $t0, $t0, $t4
	substring_loop:

	beqz       $t2, end_substring_loop
	lb         $t3, ($t0)
	sb         $t3, ($t1)
	subu       $t2, $t2, 1
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          substring_loop
	end_substring_loop:

	sb         $zero, ($t1)
	sw         $v0, -4($fp)
	#          RETURN substring_result ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Object_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT None ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	lw         $a0, ($fp)
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
String_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT String ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_String
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Int_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT Int ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_Int
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Bool_abort:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          ABORT Bool ;
	la         $a0, data_abort
	li         $v0, 4
	syscall
	la         $a0, abort_Bool
	li         $v0, 4
	syscall
	la         $a0, new_line
	li         $v0, 4
	syscall
	li         $v0, 10
	syscall
Bool_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_34 = LOAD data_61 ;
	la         $t0, data_61
	sw         $t0, -4($fp)
	#          RETURN local_34 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Int_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_35 = LOAD data_62 ;
	la         $t0, data_62
	sw         $t0, -4($fp)
	#          RETURN local_35 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
String_type_name:
	move       $fp, $sp
	subu       $sp, $sp, 4
	#          local_36 = LOAD data_63 ;
	la         $t0, data_63
	sw         $t0, -4($fp)
	#          RETURN local_36 ;
	lw         $v0, -4($fp)
	addu       $sp, $sp, 4
	jr         $ra
Board___init__:
	move       $fp, $sp
	subu       $sp, $sp, 0
	#          SETATTR self rows 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size 0 ;
	li         $t0, 0
	lw         $t1, 0($fp)
	sw         $t0, 28($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 0
	jr         $ra
Board_size_of_board:
	move       $fp, $sp
	subu       $sp, $sp, 8
	#          local_1 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG initial ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          RETURN local_1 ;
	lw         $v0, -8($fp)
	addu       $sp, $sp, 8
	jr         $ra
Board_board_init:
	move       $fp, $sp
	subu       $sp, $sp, 84
	#          local_1 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_2 = VCALL local_1 size_of_board ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG start ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 40($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          size = local_2 ;
	lw         $t0, -12($fp)
	sw         $t0, -4($fp)
	#          local_3 = size == 15 ;
	lw         $t0, -4($fp)
	li         $t1, 15
	seq        $t0, $t0, $t1
	sw         $t0, -16($fp)
	#          local_4 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -20($fp)
	#          IF local_4 GOTO label_11 ;
	lw         $t0, -20($fp)
	bnez       $t0, label_11
	#          local_5 = size == 16 ;
	lw         $t0, -4($fp)
	li         $t1, 16
	seq        $t0, $t0, $t1
	sw         $t0, -24($fp)
	#          local_6 = local_5 ;
	lw         $t0, -24($fp)
	sw         $t0, -28($fp)
	#          IF local_6 GOTO label_9 ;
	lw         $t0, -28($fp)
	bnez       $t0, label_9
	#          local_7 = size == 20 ;
	lw         $t0, -4($fp)
	li         $t1, 20
	seq        $t0, $t0, $t1
	sw         $t0, -32($fp)
	#          local_8 = local_7 ;
	lw         $t0, -32($fp)
	sw         $t0, -36($fp)
	#          IF local_8 GOTO label_7 ;
	lw         $t0, -36($fp)
	bnez       $t0, label_7
	#          local_9 = size == 21 ;
	lw         $t0, -4($fp)
	li         $t1, 21
	seq        $t0, $t0, $t1
	sw         $t0, -40($fp)
	#          local_10 = local_9 ;
	lw         $t0, -40($fp)
	sw         $t0, -44($fp)
	#          IF local_10 GOTO label_5 ;
	lw         $t0, -44($fp)
	bnez       $t0, label_5
	#          local_11 = size == 25 ;
	lw         $t0, -4($fp)
	li         $t1, 25
	seq        $t0, $t0, $t1
	sw         $t0, -48($fp)
	#          local_12 = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -52($fp)
	#          IF local_12 GOTO label_3 ;
	lw         $t0, -52($fp)
	bnez       $t0, label_3
	#          local_13 = size == 28 ;
	lw         $t0, -4($fp)
	li         $t1, 28
	seq        $t0, $t0, $t1
	sw         $t0, -56($fp)
	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          IF local_14 GOTO label_1 ;
	lw         $t0, -60($fp)
	bnez       $t0, label_1
	#          SETATTR self rows 5 ;
	li         $t0, 5
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 5 ;
	li         $t0, 5
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_15 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -64($fp)
	#          GOTO label_2 ;
	b          label_2
	#          LABEL label_1 ;
	label_1:

	#          SETATTR self rows 7 ;
	li         $t0, 7
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 4 ;
	li         $t0, 4
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_15 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -64($fp)
	#          LABEL label_2 ;
	label_2:

	#          local_16 = local_15 ;
	lw         $t0, -64($fp)
	sw         $t0, -68($fp)
	#          GOTO label_4 ;
	b          label_4
	#          LABEL label_3 ;
	label_3:

	#          SETATTR self rows 5 ;
	li         $t0, 5
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 5 ;
	li         $t0, 5
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_16 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -68($fp)
	#          LABEL label_4 ;
	label_4:

	#          local_17 = local_16 ;
	lw         $t0, -68($fp)
	sw         $t0, -72($fp)
	#          GOTO label_6 ;
	b          label_6
	#          LABEL label_5 ;
	label_5:

	#          SETATTR self rows 3 ;
	li         $t0, 3
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 7 ;
	li         $t0, 7
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_17 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -72($fp)
	#          LABEL label_6 ;
	label_6:

	#          local_18 = local_17 ;
	lw         $t0, -72($fp)
	sw         $t0, -76($fp)
	#          GOTO label_8 ;
	b          label_8
	#          LABEL label_7 ;
	label_7:

	#          SETATTR self rows 4 ;
	li         $t0, 4
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 5 ;
	li         $t0, 5
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_18 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -76($fp)
	#          LABEL label_8 ;
	label_8:

	#          local_19 = local_18 ;
	lw         $t0, -76($fp)
	sw         $t0, -80($fp)
	#          GOTO label_10 ;
	b          label_10
	#          LABEL label_9 ;
	label_9:

	#          SETATTR self rows 4 ;
	li         $t0, 4
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 4 ;
	li         $t0, 4
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_19 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -80($fp)
	#          LABEL label_10 ;
	label_10:

	#          local_20 = local_19 ;
	lw         $t0, -80($fp)
	sw         $t0, -84($fp)
	#          GOTO label_12 ;
	b          label_12
	#          LABEL label_11 ;
	label_11:

	#          SETATTR self rows 3 ;
	li         $t0, 3
	lw         $t1, 4($fp)
	sw         $t0, 20($t1)
	#          SETATTR self columns 5 ;
	li         $t0, 5
	lw         $t1, 4($fp)
	sw         $t0, 24($t1)
	#          SETATTR self board_size size ;
	lw         $t0, -4($fp)
	lw         $t1, 4($fp)
	sw         $t0, 28($t1)
	#          local_20 = size ;
	lw         $t0, -4($fp)
	sw         $t0, -84($fp)
	#          LABEL label_12 ;
	label_12:

	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 84
	jr         $ra
CellularAutomaton___init__:
	move       $fp, $sp
	subu       $sp, $sp, 8
	#          local_0 = VCALL Board __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        Board___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          local_1 = ALLOCATE String ;
	li         $a0, 1024
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	#          SETATTR self population_map local_1 ;
	lw         $t0, -8($fp)
	lw         $t1, 0($fp)
	sw         $t0, 32($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 8
	jr         $ra
CellularAutomaton_init:
	move       $fp, $sp
	subu       $sp, $sp, 8
	#          SETATTR self population_map map ;
	lw         $t0, 0($fp)
	lw         $t1, 4($fp)
	sw         $t0, 32($t1)
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 board_init ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG map ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 44($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          RETURN self ;
	lw         $v0, 4($fp)
	addu       $sp, $sp, 8
	jr         $ra
CellularAutomaton_print:
	move       $fp, $sp
	subu       $sp, $sp, 80
	#          i = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          local_2 = GETATTR self board_size ;
	lw         $t0, 0($fp)
	lw         $t1, 28($t0)
	sw         $t1, -12($fp)
	#          num = local_2 ;
	lw         $t0, -12($fp)
	sw         $t0, -8($fp)
	#          local_3 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -16($fp)
	#          local_4 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -20($fp)
	#          local_5 = VCALL local_3 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -16($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -24($fp)
	#          LABEL label_13 ;
	label_13:

	#          local_6 = i < num ;
	lw         $t0, -4($fp)
	lw         $t1, -8($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -28($fp)
	#          IF local_6 GOTO label_14 ;
	lw         $t0, -28($fp)
	bnez       $t0, label_14
	#          GOTO label_15 ;
	b          label_15
	#          LABEL label_14 ;
	label_14:

	#          local_7 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -32($fp)
	#          local_9 = GETATTR self population_map ;
	lw         $t0, 0($fp)
	lw         $t1, 32($t0)
	sw         $t1, -40($fp)
	#          local_10 = GETATTR self columns ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -44($fp)
	#          local_11 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_9 ;
	lw         $t0, -40($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG i ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_10 ;
	lw         $t0, -44($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          local_12 = VCALL local_7 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_11 ;
	lw         $t0, -48($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -32($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -52($fp)
	#          local_13 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -56($fp)
	#          local_4 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -20($fp)
	#          local_14 = VCALL local_13 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -56($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -60($fp)
	#          local_15 = GETATTR self columns ;
	lw         $t0, 0($fp)
	lw         $t1, 24($t0)
	sw         $t1, -64($fp)
	#          local_16 = i + local_15 ;
	lw         $t0, -4($fp)
	lw         $t1, -64($fp)
	add        $t0, $t0, $t1
	sw         $t0, -68($fp)
	#          i = local_16 ;
	lw         $t0, -68($fp)
	sw         $t0, -4($fp)
	#          GOTO label_13 ;
	b          label_13
	#          LABEL label_15 ;
	label_15:

	#          local_17 = 0 ;
	li         $t0, 0
	sw         $t0, -72($fp)
	#          local_18 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -76($fp)
	#          local_4 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -20($fp)
	#          local_19 = VCALL local_18 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_4 ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -76($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -80($fp)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 80
	jr         $ra
CellularAutomaton_num_cells:
	move       $fp, $sp
	subu       $sp, $sp, 12
	#          local_1 = GETATTR self population_map ;
	lw         $t0, 0($fp)
	lw         $t1, 32($t0)
	sw         $t1, -8($fp)
	#          local_2 = VCALL String length ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_length
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -12($fp)
	#          RETURN local_2 ;
	lw         $v0, -12($fp)
	addu       $sp, $sp, 12
	jr         $ra
CellularAutomaton_cell:
	move       $fp, $sp
	subu       $sp, $sp, 32
	#          local_0 = GETATTR self board_size ;
	lw         $t0, 4($fp)
	lw         $t1, 28($t0)
	sw         $t1, -4($fp)
	#          local_1 = local_0 - 1 ;
	lw         $t0, -4($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -8($fp)
	#          local_2 = local_1 < position ;
	lw         $t0, -8($fp)
	lw         $t1, 0($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          IF local_2 GOTO label_16 ;
	lw         $t0, -12($fp)
	bnez       $t0, label_16
	#          local_5 = GETATTR self population_map ;
	lw         $t0, 4($fp)
	lw         $t1, 32($t0)
	sw         $t1, -24($fp)
	#          local_6 = VCALL String substr ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG 1 ;
	li         $t0, 1
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_substr
	addu       $sp, $sp, 12
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_7 = local_6 ;
	lw         $t0, -28($fp)
	sw         $t0, -32($fp)
	#          GOTO label_17 ;
	b          label_17
	#          LABEL label_16 ;
	label_16:

	#          local_3 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -16($fp)
	#          local_7 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -32($fp)
	#          LABEL label_17 ;
	label_17:

	#          RETURN local_7 ;
	lw         $v0, -32($fp)
	addu       $sp, $sp, 32
	jr         $ra
CellularAutomaton_north:
	move       $fp, $sp
	subu       $sp, $sp, 36
	#          local_0 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -4($fp)
	#          local_1 = position - local_0 ;
	lw         $t0, 0($fp)
	lw         $t1, -4($fp)
	sub        $t0, $t0, $t1
	sw         $t0, -8($fp)
	#          local_2 = local_1 < 0 ;
	lw         $t0, -8($fp)
	li         $t1, 0
	slt        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          IF local_2 GOTO label_18 ;
	lw         $t0, -12($fp)
	bnez       $t0, label_18
	#          local_4 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -20($fp)
	#          local_5 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -24($fp)
	#          local_6 = position - local_5 ;
	lw         $t0, 0($fp)
	lw         $t1, -24($fp)
	sub        $t0, $t0, $t1
	sw         $t0, -28($fp)
	#          local_7 = VCALL local_4 cell ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -20($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          local_8 = local_7 ;
	lw         $t0, -32($fp)
	sw         $t0, -36($fp)
	#          GOTO label_19 ;
	b          label_19
	#          LABEL label_18 ;
	label_18:

	#          local_3 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -16($fp)
	#          local_8 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -36($fp)
	#          LABEL label_19 ;
	label_19:

	#          RETURN local_8 ;
	lw         $v0, -36($fp)
	addu       $sp, $sp, 36
	jr         $ra
CellularAutomaton_south:
	move       $fp, $sp
	subu       $sp, $sp, 40
	#          local_0 = GETATTR self board_size ;
	lw         $t0, 4($fp)
	lw         $t1, 28($t0)
	sw         $t1, -4($fp)
	#          local_1 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -8($fp)
	#          local_2 = position + local_1 ;
	lw         $t0, 0($fp)
	lw         $t1, -8($fp)
	add        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          local_3 = local_0 < local_2 ;
	lw         $t0, -4($fp)
	lw         $t1, -12($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -16($fp)
	#          IF local_3 GOTO label_20 ;
	lw         $t0, -16($fp)
	bnez       $t0, label_20
	#          local_5 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -24($fp)
	#          local_6 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -28($fp)
	#          local_7 = position + local_6 ;
	lw         $t0, 0($fp)
	lw         $t1, -28($fp)
	add        $t0, $t0, $t1
	sw         $t0, -32($fp)
	#          local_8 = VCALL local_5 cell ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_7 ;
	lw         $t0, -32($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -24($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -36($fp)
	#          local_9 = local_8 ;
	lw         $t0, -36($fp)
	sw         $t0, -40($fp)
	#          GOTO label_21 ;
	b          label_21
	#          LABEL label_20 ;
	label_20:

	#          local_4 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -20($fp)
	#          local_9 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -40($fp)
	#          LABEL label_21 ;
	label_21:

	#          RETURN local_9 ;
	lw         $v0, -40($fp)
	addu       $sp, $sp, 40
	jr         $ra
CellularAutomaton_east:
	move       $fp, $sp
	subu       $sp, $sp, 52
	#          local_0 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -4($fp)
	#          local_1 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -8($fp)
	#          local_2 = local_0 / local_1 ;
	lw         $t0, -4($fp)
	lw         $t1, -8($fp)
	div        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          local_3 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -16($fp)
	#          local_4 = local_2 * local_3 ;
	lw         $t0, -12($fp)
	lw         $t1, -16($fp)
	mul        $t0, $t0, $t1
	sw         $t0, -20($fp)
	#          local_5 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -24($fp)
	#          local_6 = local_4 == local_5 ;
	lw         $t0, -20($fp)
	lw         $t1, -24($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -28($fp)
	#          local_7 = local_6 ;
	lw         $t0, -28($fp)
	sw         $t0, -32($fp)
	#          IF local_7 GOTO label_22 ;
	lw         $t0, -32($fp)
	bnez       $t0, label_22
	#          local_9 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -40($fp)
	#          local_10 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -44($fp)
	#          local_11 = VCALL local_9 cell ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_10 ;
	lw         $t0, -44($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -40($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          local_12 = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -52($fp)
	#          GOTO label_23 ;
	b          label_23
	#          LABEL label_22 ;
	label_22:

	#          local_8 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -36($fp)
	#          local_12 = local_8 ;
	lw         $t0, -36($fp)
	sw         $t0, -52($fp)
	#          LABEL label_23 ;
	label_23:

	#          RETURN local_12 ;
	lw         $v0, -52($fp)
	addu       $sp, $sp, 52
	jr         $ra
CellularAutomaton_west:
	move       $fp, $sp
	subu       $sp, $sp, 56
	#          local_0 = position == 0 ;
	lw         $t0, 0($fp)
	li         $t1, 0
	seq        $t0, $t0, $t1
	sw         $t0, -4($fp)
	#          local_1 = local_0 ;
	lw         $t0, -4($fp)
	sw         $t0, -8($fp)
	#          IF local_1 GOTO label_26 ;
	lw         $t0, -8($fp)
	bnez       $t0, label_26
	#          local_3 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -16($fp)
	#          local_4 = position / local_3 ;
	lw         $t0, 0($fp)
	lw         $t1, -16($fp)
	div        $t0, $t0, $t1
	sw         $t0, -20($fp)
	#          local_5 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -24($fp)
	#          local_6 = local_4 * local_5 ;
	lw         $t0, -20($fp)
	lw         $t1, -24($fp)
	mul        $t0, $t0, $t1
	sw         $t0, -28($fp)
	#          local_7 = local_6 == position ;
	lw         $t0, -28($fp)
	lw         $t1, 0($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -32($fp)
	#          local_8 = local_7 ;
	lw         $t0, -32($fp)
	sw         $t0, -36($fp)
	#          IF local_8 GOTO label_24 ;
	lw         $t0, -36($fp)
	bnez       $t0, label_24
	#          local_9 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -40($fp)
	#          local_10 = position - 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -44($fp)
	#          local_11 = VCALL local_9 cell ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_10 ;
	lw         $t0, -44($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -40($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          local_12 = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -52($fp)
	#          GOTO label_25 ;
	b          label_25
	#          LABEL label_24 ;
	label_24:

	#          local_2 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -12($fp)
	#          local_12 = local_2 ;
	lw         $t0, -12($fp)
	sw         $t0, -52($fp)
	#          LABEL label_25 ;
	label_25:

	#          local_13 = local_12 ;
	lw         $t0, -52($fp)
	sw         $t0, -56($fp)
	#          GOTO label_27 ;
	b          label_27
	#          LABEL label_26 ;
	label_26:

	#          local_2 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -12($fp)
	#          local_13 = local_2 ;
	lw         $t0, -12($fp)
	sw         $t0, -56($fp)
	#          LABEL label_27 ;
	label_27:

	#          RETURN local_13 ;
	lw         $v0, -56($fp)
	addu       $sp, $sp, 56
	jr         $ra
CellularAutomaton_northwest:
	move       $fp, $sp
	subu       $sp, $sp, 60
	#          local_0 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -4($fp)
	#          local_1 = position - local_0 ;
	lw         $t0, 0($fp)
	lw         $t1, -4($fp)
	sub        $t0, $t0, $t1
	sw         $t0, -8($fp)
	#          local_2 = local_1 < 0 ;
	lw         $t0, -8($fp)
	li         $t1, 0
	slt        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          IF local_2 GOTO label_30 ;
	lw         $t0, -12($fp)
	bnez       $t0, label_30
	#          local_4 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -20($fp)
	#          local_5 = position / local_4 ;
	lw         $t0, 0($fp)
	lw         $t1, -20($fp)
	div        $t0, $t0, $t1
	sw         $t0, -24($fp)
	#          local_6 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -28($fp)
	#          local_7 = local_5 * local_6 ;
	lw         $t0, -24($fp)
	lw         $t1, -28($fp)
	mul        $t0, $t0, $t1
	sw         $t0, -32($fp)
	#          local_8 = local_7 == position ;
	lw         $t0, -32($fp)
	lw         $t1, 0($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -36($fp)
	#          local_9 = local_8 ;
	lw         $t0, -36($fp)
	sw         $t0, -40($fp)
	#          IF local_9 GOTO label_28 ;
	lw         $t0, -40($fp)
	bnez       $t0, label_28
	#          local_10 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -44($fp)
	#          local_11 = position - 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -48($fp)
	#          local_12 = VCALL local_10 north ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_11 ;
	lw         $t0, -48($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -44($fp)
	ulw        $t1, 68($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -52($fp)
	#          local_13 = local_12 ;
	lw         $t0, -52($fp)
	sw         $t0, -56($fp)
	#          GOTO label_29 ;
	b          label_29
	#          LABEL label_28 ;
	label_28:

	#          local_3 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -16($fp)
	#          local_13 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -56($fp)
	#          LABEL label_29 ;
	label_29:

	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          GOTO label_31 ;
	b          label_31
	#          LABEL label_30 ;
	label_30:

	#          local_3 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -16($fp)
	#          local_14 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -60($fp)
	#          LABEL label_31 ;
	label_31:

	#          RETURN local_14 ;
	lw         $v0, -60($fp)
	addu       $sp, $sp, 60
	jr         $ra
CellularAutomaton_northeast:
	move       $fp, $sp
	subu       $sp, $sp, 68
	#          local_0 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -4($fp)
	#          local_1 = position - local_0 ;
	lw         $t0, 0($fp)
	lw         $t1, -4($fp)
	sub        $t0, $t0, $t1
	sw         $t0, -8($fp)
	#          local_2 = local_1 < 0 ;
	lw         $t0, -8($fp)
	li         $t1, 0
	slt        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          IF local_2 GOTO label_34 ;
	lw         $t0, -12($fp)
	bnez       $t0, label_34
	#          local_4 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -20($fp)
	#          local_5 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -24($fp)
	#          local_6 = local_4 / local_5 ;
	lw         $t0, -20($fp)
	lw         $t1, -24($fp)
	div        $t0, $t0, $t1
	sw         $t0, -28($fp)
	#          local_7 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -32($fp)
	#          local_8 = local_6 * local_7 ;
	lw         $t0, -28($fp)
	lw         $t1, -32($fp)
	mul        $t0, $t0, $t1
	sw         $t0, -36($fp)
	#          local_9 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -40($fp)
	#          local_10 = local_8 == local_9 ;
	lw         $t0, -36($fp)
	lw         $t1, -40($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -44($fp)
	#          local_11 = local_10 ;
	lw         $t0, -44($fp)
	sw         $t0, -48($fp)
	#          IF local_11 GOTO label_32 ;
	lw         $t0, -48($fp)
	bnez       $t0, label_32
	#          local_12 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -52($fp)
	#          local_13 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -56($fp)
	#          local_14 = VCALL local_12 north ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_13 ;
	lw         $t0, -56($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -52($fp)
	ulw        $t1, 68($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -60($fp)
	#          local_15 = local_14 ;
	lw         $t0, -60($fp)
	sw         $t0, -64($fp)
	#          GOTO label_33 ;
	b          label_33
	#          LABEL label_32 ;
	label_32:

	#          local_3 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -16($fp)
	#          local_15 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -64($fp)
	#          LABEL label_33 ;
	label_33:

	#          local_16 = local_15 ;
	lw         $t0, -64($fp)
	sw         $t0, -68($fp)
	#          GOTO label_35 ;
	b          label_35
	#          LABEL label_34 ;
	label_34:

	#          local_3 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -16($fp)
	#          local_16 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -68($fp)
	#          LABEL label_35 ;
	label_35:

	#          RETURN local_16 ;
	lw         $v0, -68($fp)
	addu       $sp, $sp, 68
	jr         $ra
CellularAutomaton_southeast:
	move       $fp, $sp
	subu       $sp, $sp, 72
	#          local_0 = GETATTR self board_size ;
	lw         $t0, 4($fp)
	lw         $t1, 28($t0)
	sw         $t1, -4($fp)
	#          local_1 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -8($fp)
	#          local_2 = position + local_1 ;
	lw         $t0, 0($fp)
	lw         $t1, -8($fp)
	add        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          local_3 = local_0 < local_2 ;
	lw         $t0, -4($fp)
	lw         $t1, -12($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -16($fp)
	#          IF local_3 GOTO label_38 ;
	lw         $t0, -16($fp)
	bnez       $t0, label_38
	#          local_5 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -24($fp)
	#          local_6 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -28($fp)
	#          local_7 = local_5 / local_6 ;
	lw         $t0, -24($fp)
	lw         $t1, -28($fp)
	div        $t0, $t0, $t1
	sw         $t0, -32($fp)
	#          local_8 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -36($fp)
	#          local_9 = local_7 * local_8 ;
	lw         $t0, -32($fp)
	lw         $t1, -36($fp)
	mul        $t0, $t0, $t1
	sw         $t0, -40($fp)
	#          local_10 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -44($fp)
	#          local_11 = local_9 == local_10 ;
	lw         $t0, -40($fp)
	lw         $t1, -44($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -48($fp)
	#          local_12 = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -52($fp)
	#          IF local_12 GOTO label_36 ;
	lw         $t0, -52($fp)
	bnez       $t0, label_36
	#          local_13 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -56($fp)
	#          local_14 = position + 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -60($fp)
	#          local_15 = VCALL local_13 south ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_14 ;
	lw         $t0, -60($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -56($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -64($fp)
	#          local_16 = local_15 ;
	lw         $t0, -64($fp)
	sw         $t0, -68($fp)
	#          GOTO label_37 ;
	b          label_37
	#          LABEL label_36 ;
	label_36:

	#          local_4 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -20($fp)
	#          local_16 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -68($fp)
	#          LABEL label_37 ;
	label_37:

	#          local_17 = local_16 ;
	lw         $t0, -68($fp)
	sw         $t0, -72($fp)
	#          GOTO label_39 ;
	b          label_39
	#          LABEL label_38 ;
	label_38:

	#          local_4 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -20($fp)
	#          local_17 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -72($fp)
	#          LABEL label_39 ;
	label_39:

	#          RETURN local_17 ;
	lw         $v0, -72($fp)
	addu       $sp, $sp, 72
	jr         $ra
CellularAutomaton_southwest:
	move       $fp, $sp
	subu       $sp, $sp, 64
	#          local_0 = GETATTR self board_size ;
	lw         $t0, 4($fp)
	lw         $t1, 28($t0)
	sw         $t1, -4($fp)
	#          local_1 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -8($fp)
	#          local_2 = position + local_1 ;
	lw         $t0, 0($fp)
	lw         $t1, -8($fp)
	add        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          local_3 = local_0 < local_2 ;
	lw         $t0, -4($fp)
	lw         $t1, -12($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -16($fp)
	#          IF local_3 GOTO label_42 ;
	lw         $t0, -16($fp)
	bnez       $t0, label_42
	#          local_5 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -24($fp)
	#          local_6 = position / local_5 ;
	lw         $t0, 0($fp)
	lw         $t1, -24($fp)
	div        $t0, $t0, $t1
	sw         $t0, -28($fp)
	#          local_7 = GETATTR self columns ;
	lw         $t0, 4($fp)
	lw         $t1, 24($t0)
	sw         $t1, -32($fp)
	#          local_8 = local_6 * local_7 ;
	lw         $t0, -28($fp)
	lw         $t1, -32($fp)
	mul        $t0, $t0, $t1
	sw         $t0, -36($fp)
	#          local_9 = local_8 == position ;
	lw         $t0, -36($fp)
	lw         $t1, 0($fp)
	seq        $t0, $t0, $t1
	sw         $t0, -40($fp)
	#          local_10 = local_9 ;
	lw         $t0, -40($fp)
	sw         $t0, -44($fp)
	#          IF local_10 GOTO label_40 ;
	lw         $t0, -44($fp)
	bnez       $t0, label_40
	#          local_11 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -48($fp)
	#          local_12 = position - 1 ;
	lw         $t0, 0($fp)
	li         $t1, 1
	sub        $t0, $t0, $t1
	sw         $t0, -52($fp)
	#          local_13 = VCALL local_11 south ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_12 ;
	lw         $t0, -52($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -48($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -56($fp)
	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          GOTO label_41 ;
	b          label_41
	#          LABEL label_40 ;
	label_40:

	#          local_4 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -20($fp)
	#          local_14 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -60($fp)
	#          LABEL label_41 ;
	label_41:

	#          local_15 = local_14 ;
	lw         $t0, -60($fp)
	sw         $t0, -64($fp)
	#          GOTO label_43 ;
	b          label_43
	#          LABEL label_42 ;
	label_42:

	#          local_4 = LOAD data_3 ;
	la         $t0, data_3
	sw         $t0, -20($fp)
	#          local_15 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -64($fp)
	#          LABEL label_43 ;
	label_43:

	#          RETURN local_15 ;
	lw         $v0, -64($fp)
	addu       $sp, $sp, 64
	jr         $ra
CellularAutomaton_neighbors:
	move       $fp, $sp
	subu       $sp, $sp, 192
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 north ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 68($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_3 = local_1 == local_2 ;
	lw         $t0, -8($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -16($fp)
	equal_loop_1:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_1
	beqz       $t2, end_loop_1
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_1
	b          end_loop_1
	not_equal_1:

	li         $v0, 0
	sw         $v0, -16($fp)
	end_loop_1:

	#          local_4 = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -20($fp)
	#          IF local_4 GOTO label_44 ;
	lw         $t0, -20($fp)
	bnez       $t0, label_44
	#          local_5 = 0 ;
	li         $t0, 0
	sw         $t0, -24($fp)
	#          GOTO label_45 ;
	b          label_45
	#          LABEL label_44 ;
	label_44:

	#          local_5 = 1 ;
	li         $t0, 1
	sw         $t0, -24($fp)
	#          LABEL label_45 ;
	label_45:

	#          local_6 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -28($fp)
	#          local_7 = VCALL local_6 south ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -28($fp)
	ulw        $t1, 72($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_8 = local_7 == local_2 ;
	lw         $t0, -32($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -36($fp)
	equal_loop_2:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_2
	beqz       $t2, end_loop_2
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_2
	b          end_loop_2
	not_equal_2:

	li         $v0, 0
	sw         $v0, -36($fp)
	end_loop_2:

	#          local_9 = local_8 ;
	lw         $t0, -36($fp)
	sw         $t0, -40($fp)
	#          IF local_9 GOTO label_46 ;
	lw         $t0, -40($fp)
	bnez       $t0, label_46
	#          local_10 = 0 ;
	li         $t0, 0
	sw         $t0, -44($fp)
	#          GOTO label_47 ;
	b          label_47
	#          LABEL label_46 ;
	label_46:

	#          local_10 = 1 ;
	li         $t0, 1
	sw         $t0, -44($fp)
	#          LABEL label_47 ;
	label_47:

	#          local_11 = local_5 + local_10 ;
	lw         $t0, -24($fp)
	lw         $t1, -44($fp)
	add        $t0, $t0, $t1
	sw         $t0, -48($fp)
	#          local_12 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -52($fp)
	#          local_13 = VCALL local_12 east ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -52($fp)
	ulw        $t1, 76($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -56($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_14 = local_13 == local_2 ;
	lw         $t0, -56($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -60($fp)
	equal_loop_3:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_3
	beqz       $t2, end_loop_3
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_3
	b          end_loop_3
	not_equal_3:

	li         $v0, 0
	sw         $v0, -60($fp)
	end_loop_3:

	#          local_15 = local_14 ;
	lw         $t0, -60($fp)
	sw         $t0, -64($fp)
	#          IF local_15 GOTO label_48 ;
	lw         $t0, -64($fp)
	bnez       $t0, label_48
	#          local_16 = 0 ;
	li         $t0, 0
	sw         $t0, -68($fp)
	#          GOTO label_49 ;
	b          label_49
	#          LABEL label_48 ;
	label_48:

	#          local_16 = 1 ;
	li         $t0, 1
	sw         $t0, -68($fp)
	#          LABEL label_49 ;
	label_49:

	#          local_17 = local_11 + local_16 ;
	lw         $t0, -48($fp)
	lw         $t1, -68($fp)
	add        $t0, $t0, $t1
	sw         $t0, -72($fp)
	#          local_18 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -76($fp)
	#          local_19 = VCALL local_18 west ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -76($fp)
	ulw        $t1, 80($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -80($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_20 = local_19 == local_2 ;
	lw         $t0, -80($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -84($fp)
	equal_loop_4:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_4
	beqz       $t2, end_loop_4
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_4
	b          end_loop_4
	not_equal_4:

	li         $v0, 0
	sw         $v0, -84($fp)
	end_loop_4:

	#          local_21 = local_20 ;
	lw         $t0, -84($fp)
	sw         $t0, -88($fp)
	#          IF local_21 GOTO label_50 ;
	lw         $t0, -88($fp)
	bnez       $t0, label_50
	#          local_22 = 0 ;
	li         $t0, 0
	sw         $t0, -92($fp)
	#          GOTO label_51 ;
	b          label_51
	#          LABEL label_50 ;
	label_50:

	#          local_22 = 1 ;
	li         $t0, 1
	sw         $t0, -92($fp)
	#          LABEL label_51 ;
	label_51:

	#          local_23 = local_17 + local_22 ;
	lw         $t0, -72($fp)
	lw         $t1, -92($fp)
	add        $t0, $t0, $t1
	sw         $t0, -96($fp)
	#          local_24 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -100($fp)
	#          local_25 = VCALL local_24 northeast ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -100($fp)
	ulw        $t1, 88($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -104($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_26 = local_25 == local_2 ;
	lw         $t0, -104($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -108($fp)
	equal_loop_5:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_5
	beqz       $t2, end_loop_5
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_5
	b          end_loop_5
	not_equal_5:

	li         $v0, 0
	sw         $v0, -108($fp)
	end_loop_5:

	#          local_27 = local_26 ;
	lw         $t0, -108($fp)
	sw         $t0, -112($fp)
	#          IF local_27 GOTO label_52 ;
	lw         $t0, -112($fp)
	bnez       $t0, label_52
	#          local_28 = 0 ;
	li         $t0, 0
	sw         $t0, -116($fp)
	#          GOTO label_53 ;
	b          label_53
	#          LABEL label_52 ;
	label_52:

	#          local_28 = 1 ;
	li         $t0, 1
	sw         $t0, -116($fp)
	#          LABEL label_53 ;
	label_53:

	#          local_29 = local_23 + local_28 ;
	lw         $t0, -96($fp)
	lw         $t1, -116($fp)
	add        $t0, $t0, $t1
	sw         $t0, -120($fp)
	#          local_30 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -124($fp)
	#          local_31 = VCALL local_30 northwest ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -124($fp)
	ulw        $t1, 84($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -128($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_32 = local_31 == local_2 ;
	lw         $t0, -128($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -132($fp)
	equal_loop_6:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_6
	beqz       $t2, end_loop_6
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_6
	b          end_loop_6
	not_equal_6:

	li         $v0, 0
	sw         $v0, -132($fp)
	end_loop_6:

	#          local_33 = local_32 ;
	lw         $t0, -132($fp)
	sw         $t0, -136($fp)
	#          IF local_33 GOTO label_54 ;
	lw         $t0, -136($fp)
	bnez       $t0, label_54
	#          local_34 = 0 ;
	li         $t0, 0
	sw         $t0, -140($fp)
	#          GOTO label_55 ;
	b          label_55
	#          LABEL label_54 ;
	label_54:

	#          local_34 = 1 ;
	li         $t0, 1
	sw         $t0, -140($fp)
	#          LABEL label_55 ;
	label_55:

	#          local_35 = local_29 + local_34 ;
	lw         $t0, -120($fp)
	lw         $t1, -140($fp)
	add        $t0, $t0, $t1
	sw         $t0, -144($fp)
	#          local_36 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -148($fp)
	#          local_37 = VCALL local_36 southeast ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -148($fp)
	ulw        $t1, 92($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -152($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_38 = local_37 == local_2 ;
	lw         $t0, -152($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -156($fp)
	equal_loop_7:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_7
	beqz       $t2, end_loop_7
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_7
	b          end_loop_7
	not_equal_7:

	li         $v0, 0
	sw         $v0, -156($fp)
	end_loop_7:

	#          local_39 = local_38 ;
	lw         $t0, -156($fp)
	sw         $t0, -160($fp)
	#          IF local_39 GOTO label_56 ;
	lw         $t0, -160($fp)
	bnez       $t0, label_56
	#          local_40 = 0 ;
	li         $t0, 0
	sw         $t0, -164($fp)
	#          GOTO label_57 ;
	b          label_57
	#          LABEL label_56 ;
	label_56:

	#          local_40 = 1 ;
	li         $t0, 1
	sw         $t0, -164($fp)
	#          LABEL label_57 ;
	label_57:

	#          local_41 = local_35 + local_40 ;
	lw         $t0, -144($fp)
	lw         $t1, -164($fp)
	add        $t0, $t0, $t1
	sw         $t0, -168($fp)
	#          local_42 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -172($fp)
	#          local_43 = VCALL local_42 southwest ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -172($fp)
	ulw        $t1, 96($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -176($fp)
	#          local_2 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -12($fp)
	#          local_44 = local_43 == local_2 ;
	lw         $t0, -176($fp)
	lw         $t1, -12($fp)
	li         $v0, 1
	sw         $v0, -180($fp)
	equal_loop_8:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_8
	beqz       $t2, end_loop_8
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_8
	b          end_loop_8
	not_equal_8:

	li         $v0, 0
	sw         $v0, -180($fp)
	end_loop_8:

	#          local_45 = local_44 ;
	lw         $t0, -180($fp)
	sw         $t0, -184($fp)
	#          IF local_45 GOTO label_58 ;
	lw         $t0, -184($fp)
	bnez       $t0, label_58
	#          local_46 = 0 ;
	li         $t0, 0
	sw         $t0, -188($fp)
	#          GOTO label_59 ;
	b          label_59
	#          LABEL label_58 ;
	label_58:

	#          local_46 = 1 ;
	li         $t0, 1
	sw         $t0, -188($fp)
	#          LABEL label_59 ;
	label_59:

	#          local_47 = local_41 + local_46 ;
	lw         $t0, -168($fp)
	lw         $t1, -188($fp)
	add        $t0, $t0, $t1
	sw         $t0, -192($fp)
	#          RETURN local_47 ;
	lw         $v0, -192($fp)
	addu       $sp, $sp, 192
	jr         $ra
CellularAutomaton_cell_at_next_evolution:
	move       $fp, $sp
	subu       $sp, $sp, 68
	#          local_0 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -4($fp)
	#          local_1 = VCALL local_0 neighbors ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -4($fp)
	ulw        $t1, 100($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -8($fp)
	#          local_2 = local_1 == 3 ;
	lw         $t0, -8($fp)
	li         $t1, 3
	seq        $t0, $t0, $t1
	sw         $t0, -12($fp)
	#          local_3 = local_2 ;
	lw         $t0, -12($fp)
	sw         $t0, -16($fp)
	#          IF local_3 GOTO label_64 ;
	lw         $t0, -16($fp)
	bnez       $t0, label_64
	#          local_5 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -24($fp)
	#          local_6 = VCALL local_5 neighbors ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -24($fp)
	ulw        $t1, 100($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_7 = local_6 == 2 ;
	lw         $t0, -28($fp)
	li         $t1, 2
	seq        $t0, $t0, $t1
	sw         $t0, -32($fp)
	#          local_8 = local_7 ;
	lw         $t0, -32($fp)
	sw         $t0, -36($fp)
	#          IF local_8 GOTO label_62 ;
	lw         $t0, -36($fp)
	bnez       $t0, label_62
	#          local_13 = LOAD data_5 ;
	la         $t0, data_5
	sw         $t0, -56($fp)
	#          local_15 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -64($fp)
	#          GOTO label_63 ;
	b          label_63
	#          LABEL label_62 ;
	label_62:

	#          local_9 = GETTYPEADDR self ;
	lw         $t1, 4($fp)
	lw         $t0, 8($t1)
	sw         $t0, -40($fp)
	#          local_10 = VCALL local_9 cell ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -40($fp)
	ulw        $t1, 64($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -44($fp)
	#          local_4 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -20($fp)
	#          local_11 = local_10 == local_4 ;
	lw         $t0, -44($fp)
	lw         $t1, -20($fp)
	li         $v0, 1
	sw         $v0, -48($fp)
	equal_loop_9:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_9
	beqz       $t2, end_loop_9
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_9
	b          end_loop_9
	not_equal_9:

	li         $v0, 0
	sw         $v0, -48($fp)
	end_loop_9:

	#          local_12 = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -52($fp)
	#          IF local_12 GOTO label_60 ;
	lw         $t0, -52($fp)
	bnez       $t0, label_60
	#          local_13 = LOAD data_5 ;
	la         $t0, data_5
	sw         $t0, -56($fp)
	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          GOTO label_61 ;
	b          label_61
	#          LABEL label_60 ;
	label_60:

	#          local_4 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -20($fp)
	#          local_14 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -60($fp)
	#          LABEL label_61 ;
	label_61:

	#          local_15 = local_14 ;
	lw         $t0, -60($fp)
	sw         $t0, -64($fp)
	#          LABEL label_63 ;
	label_63:

	#          local_16 = local_15 ;
	lw         $t0, -64($fp)
	sw         $t0, -68($fp)
	#          GOTO label_65 ;
	b          label_65
	#          LABEL label_64 ;
	label_64:

	#          local_4 = LOAD data_4 ;
	la         $t0, data_4
	sw         $t0, -20($fp)
	#          local_16 = local_4 ;
	lw         $t0, -20($fp)
	sw         $t0, -68($fp)
	#          LABEL label_65 ;
	label_65:

	#          RETURN local_16 ;
	lw         $v0, -68($fp)
	addu       $sp, $sp, 68
	jr         $ra
CellularAutomaton_evolve:
	move       $fp, $sp
	subu       $sp, $sp, 48
	#          position = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          local_2 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -12($fp)
	#          local_3 = VCALL local_2 num_cells ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -12($fp)
	ulw        $t1, 60($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          num = local_3 ;
	lw         $t0, -16($fp)
	sw         $t0, -8($fp)
	#          temp = ALLOCATE String ;
	li         $a0, 1024
	li         $v0, 9
	syscall
	sw         $v0, -20($fp)
	#          LABEL label_66 ;
	label_66:

	#          local_5 = position < num ;
	lw         $t0, -4($fp)
	lw         $t1, -8($fp)
	slt        $t0, $t0, $t1
	sw         $t0, -24($fp)
	#          IF local_5 GOTO label_67 ;
	lw         $t0, -24($fp)
	bnez       $t0, label_67
	#          GOTO label_68 ;
	b          label_68
	#          LABEL label_67 ;
	label_67:

	#          local_7 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -32($fp)
	#          local_8 = VCALL local_7 cell_at_next_evolution ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG position ;
	lw         $t0, -4($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -32($fp)
	ulw        $t1, 104($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -36($fp)
	#          local_9 = VCALL String concat ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG temp ;
	lw         $t0, -20($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_8 ;
	lw         $t0, -36($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        String_concat
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          temp = local_9 ;
	lw         $t0, -40($fp)
	sw         $t0, -20($fp)
	#          local_10 = position + 1 ;
	lw         $t0, -4($fp)
	li         $t1, 1
	add        $t0, $t0, $t1
	sw         $t0, -44($fp)
	#          position = local_10 ;
	lw         $t0, -44($fp)
	sw         $t0, -4($fp)
	#          GOTO label_66 ;
	b          label_66
	#          LABEL label_68 ;
	label_68:

	#          local_11 = 0 ;
	li         $t0, 0
	sw         $t0, -48($fp)
	#          SETATTR self population_map temp ;
	lw         $t0, -20($fp)
	lw         $t1, 0($fp)
	sw         $t0, 32($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 48
	jr         $ra
CellularAutomaton_option:
	move       $fp, $sp
	subu       $sp, $sp, 640
	#          num = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          local_1 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_2 = LOAD data_6 ;
	la         $t0, data_6
	sw         $t0, -12($fp)
	#          local_3 = VCALL local_1 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          local_4 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -20($fp)
	#          local_5 = LOAD data_7 ;
	la         $t0, data_7
	sw         $t0, -24($fp)
	#          local_6 = VCALL local_4 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -20($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_7 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -32($fp)
	#          local_8 = LOAD data_8 ;
	la         $t0, data_8
	sw         $t0, -36($fp)
	#          local_9 = VCALL local_7 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_8 ;
	lw         $t0, -36($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -32($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          local_10 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -44($fp)
	#          local_11 = LOAD data_9 ;
	la         $t0, data_9
	sw         $t0, -48($fp)
	#          local_12 = VCALL local_10 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_11 ;
	lw         $t0, -48($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -44($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -52($fp)
	#          local_13 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -56($fp)
	#          local_14 = LOAD data_10 ;
	la         $t0, data_10
	sw         $t0, -60($fp)
	#          local_15 = VCALL local_13 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_14 ;
	lw         $t0, -60($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -56($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -64($fp)
	#          local_16 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -68($fp)
	#          local_17 = LOAD data_11 ;
	la         $t0, data_11
	sw         $t0, -72($fp)
	#          local_18 = VCALL local_16 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_17 ;
	lw         $t0, -72($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -68($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -76($fp)
	#          local_19 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -80($fp)
	#          local_20 = LOAD data_12 ;
	la         $t0, data_12
	sw         $t0, -84($fp)
	#          local_21 = VCALL local_19 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_20 ;
	lw         $t0, -84($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -80($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -88($fp)
	#          local_22 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -92($fp)
	#          local_23 = LOAD data_13 ;
	la         $t0, data_13
	sw         $t0, -96($fp)
	#          local_24 = VCALL local_22 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_23 ;
	lw         $t0, -96($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -92($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -100($fp)
	#          local_25 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -104($fp)
	#          local_26 = LOAD data_14 ;
	la         $t0, data_14
	sw         $t0, -108($fp)
	#          local_27 = VCALL local_25 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_26 ;
	lw         $t0, -108($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -104($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -112($fp)
	#          local_28 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -116($fp)
	#          local_29 = LOAD data_15 ;
	la         $t0, data_15
	sw         $t0, -120($fp)
	#          local_30 = VCALL local_28 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_29 ;
	lw         $t0, -120($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -116($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -124($fp)
	#          local_31 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -128($fp)
	#          local_32 = LOAD data_16 ;
	la         $t0, data_16
	sw         $t0, -132($fp)
	#          local_33 = VCALL local_31 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_32 ;
	lw         $t0, -132($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -128($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -136($fp)
	#          local_34 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -140($fp)
	#          local_35 = LOAD data_17 ;
	la         $t0, data_17
	sw         $t0, -144($fp)
	#          local_36 = VCALL local_34 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_35 ;
	lw         $t0, -144($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -140($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -148($fp)
	#          local_37 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -152($fp)
	#          local_38 = LOAD data_18 ;
	la         $t0, data_18
	sw         $t0, -156($fp)
	#          local_39 = VCALL local_37 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_38 ;
	lw         $t0, -156($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -152($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -160($fp)
	#          local_40 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -164($fp)
	#          local_41 = LOAD data_19 ;
	la         $t0, data_19
	sw         $t0, -168($fp)
	#          local_42 = VCALL local_40 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_41 ;
	lw         $t0, -168($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -164($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -172($fp)
	#          local_43 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -176($fp)
	#          local_44 = LOAD data_20 ;
	la         $t0, data_20
	sw         $t0, -180($fp)
	#          local_45 = VCALL local_43 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_44 ;
	lw         $t0, -180($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -176($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -184($fp)
	#          local_46 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -188($fp)
	#          local_47 = LOAD data_21 ;
	la         $t0, data_21
	sw         $t0, -192($fp)
	#          local_48 = VCALL local_46 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_47 ;
	lw         $t0, -192($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -188($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -196($fp)
	#          local_49 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -200($fp)
	#          local_50 = LOAD data_22 ;
	la         $t0, data_22
	sw         $t0, -204($fp)
	#          local_51 = VCALL local_49 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_50 ;
	lw         $t0, -204($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -200($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -208($fp)
	#          local_52 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -212($fp)
	#          local_53 = LOAD data_23 ;
	la         $t0, data_23
	sw         $t0, -216($fp)
	#          local_54 = VCALL local_52 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_53 ;
	lw         $t0, -216($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -212($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -220($fp)
	#          local_55 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -224($fp)
	#          local_56 = LOAD data_24 ;
	la         $t0, data_24
	sw         $t0, -228($fp)
	#          local_57 = VCALL local_55 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_56 ;
	lw         $t0, -228($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -224($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -232($fp)
	#          local_58 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -236($fp)
	#          local_59 = LOAD data_25 ;
	la         $t0, data_25
	sw         $t0, -240($fp)
	#          local_60 = VCALL local_58 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_59 ;
	lw         $t0, -240($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -236($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -244($fp)
	#          local_61 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -248($fp)
	#          local_62 = LOAD data_26 ;
	la         $t0, data_26
	sw         $t0, -252($fp)
	#          local_63 = VCALL local_61 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_62 ;
	lw         $t0, -252($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -248($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -256($fp)
	#          local_64 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -260($fp)
	#          local_65 = LOAD data_27 ;
	la         $t0, data_27
	sw         $t0, -264($fp)
	#          local_66 = VCALL local_64 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_65 ;
	lw         $t0, -264($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -260($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -268($fp)
	#          local_67 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -272($fp)
	#          local_68 = LOAD data_28 ;
	la         $t0, data_28
	sw         $t0, -276($fp)
	#          local_69 = VCALL local_67 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_68 ;
	lw         $t0, -276($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -272($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -280($fp)
	#          local_70 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -284($fp)
	#          local_71 = VCALL local_70 in_int ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -284($fp)
	ulw        $t1, 24($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -288($fp)
	#          num = local_71 ;
	lw         $t0, -288($fp)
	sw         $t0, -4($fp)
	#          local_72 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -292($fp)
	#          local_73 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -296($fp)
	#          local_74 = VCALL local_72 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_73 ;
	lw         $t0, -296($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -292($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -300($fp)
	#          local_75 = num == 1 ;
	lw         $t0, -4($fp)
	li         $t1, 1
	seq        $t0, $t0, $t1
	sw         $t0, -304($fp)
	#          local_76 = local_75 ;
	lw         $t0, -304($fp)
	sw         $t0, -308($fp)
	#          IF local_76 GOTO label_109 ;
	lw         $t0, -308($fp)
	bnez       $t0, label_109
	#          local_78 = num == 2 ;
	lw         $t0, -4($fp)
	li         $t1, 2
	seq        $t0, $t0, $t1
	sw         $t0, -316($fp)
	#          local_79 = local_78 ;
	lw         $t0, -316($fp)
	sw         $t0, -320($fp)
	#          IF local_79 GOTO label_107 ;
	lw         $t0, -320($fp)
	bnez       $t0, label_107
	#          local_81 = num == 3 ;
	lw         $t0, -4($fp)
	li         $t1, 3
	seq        $t0, $t0, $t1
	sw         $t0, -328($fp)
	#          local_82 = local_81 ;
	lw         $t0, -328($fp)
	sw         $t0, -332($fp)
	#          IF local_82 GOTO label_105 ;
	lw         $t0, -332($fp)
	bnez       $t0, label_105
	#          local_84 = num == 4 ;
	lw         $t0, -4($fp)
	li         $t1, 4
	seq        $t0, $t0, $t1
	sw         $t0, -340($fp)
	#          local_85 = local_84 ;
	lw         $t0, -340($fp)
	sw         $t0, -344($fp)
	#          IF local_85 GOTO label_103 ;
	lw         $t0, -344($fp)
	bnez       $t0, label_103
	#          local_87 = num == 5 ;
	lw         $t0, -4($fp)
	li         $t1, 5
	seq        $t0, $t0, $t1
	sw         $t0, -352($fp)
	#          local_88 = local_87 ;
	lw         $t0, -352($fp)
	sw         $t0, -356($fp)
	#          IF local_88 GOTO label_101 ;
	lw         $t0, -356($fp)
	bnez       $t0, label_101
	#          local_90 = num == 6 ;
	lw         $t0, -4($fp)
	li         $t1, 6
	seq        $t0, $t0, $t1
	sw         $t0, -364($fp)
	#          local_91 = local_90 ;
	lw         $t0, -364($fp)
	sw         $t0, -368($fp)
	#          IF local_91 GOTO label_99 ;
	lw         $t0, -368($fp)
	bnez       $t0, label_99
	#          local_93 = num == 7 ;
	lw         $t0, -4($fp)
	li         $t1, 7
	seq        $t0, $t0, $t1
	sw         $t0, -376($fp)
	#          local_94 = local_93 ;
	lw         $t0, -376($fp)
	sw         $t0, -380($fp)
	#          IF local_94 GOTO label_97 ;
	lw         $t0, -380($fp)
	bnez       $t0, label_97
	#          local_96 = num == 8 ;
	lw         $t0, -4($fp)
	li         $t1, 8
	seq        $t0, $t0, $t1
	sw         $t0, -388($fp)
	#          local_97 = local_96 ;
	lw         $t0, -388($fp)
	sw         $t0, -392($fp)
	#          IF local_97 GOTO label_95 ;
	lw         $t0, -392($fp)
	bnez       $t0, label_95
	#          local_99 = num == 9 ;
	lw         $t0, -4($fp)
	li         $t1, 9
	seq        $t0, $t0, $t1
	sw         $t0, -400($fp)
	#          local_100 = local_99 ;
	lw         $t0, -400($fp)
	sw         $t0, -404($fp)
	#          IF local_100 GOTO label_93 ;
	lw         $t0, -404($fp)
	bnez       $t0, label_93
	#          local_102 = num == 10 ;
	lw         $t0, -4($fp)
	li         $t1, 10
	seq        $t0, $t0, $t1
	sw         $t0, -412($fp)
	#          local_103 = local_102 ;
	lw         $t0, -412($fp)
	sw         $t0, -416($fp)
	#          IF local_103 GOTO label_91 ;
	lw         $t0, -416($fp)
	bnez       $t0, label_91
	#          local_105 = num == 11 ;
	lw         $t0, -4($fp)
	li         $t1, 11
	seq        $t0, $t0, $t1
	sw         $t0, -424($fp)
	#          local_106 = local_105 ;
	lw         $t0, -424($fp)
	sw         $t0, -428($fp)
	#          IF local_106 GOTO label_89 ;
	lw         $t0, -428($fp)
	bnez       $t0, label_89
	#          local_108 = num == 12 ;
	lw         $t0, -4($fp)
	li         $t1, 12
	seq        $t0, $t0, $t1
	sw         $t0, -436($fp)
	#          local_109 = local_108 ;
	lw         $t0, -436($fp)
	sw         $t0, -440($fp)
	#          IF local_109 GOTO label_87 ;
	lw         $t0, -440($fp)
	bnez       $t0, label_87
	#          local_111 = num == 13 ;
	lw         $t0, -4($fp)
	li         $t1, 13
	seq        $t0, $t0, $t1
	sw         $t0, -448($fp)
	#          local_112 = local_111 ;
	lw         $t0, -448($fp)
	sw         $t0, -452($fp)
	#          IF local_112 GOTO label_85 ;
	lw         $t0, -452($fp)
	bnez       $t0, label_85
	#          local_114 = num == 14 ;
	lw         $t0, -4($fp)
	li         $t1, 14
	seq        $t0, $t0, $t1
	sw         $t0, -460($fp)
	#          local_115 = local_114 ;
	lw         $t0, -460($fp)
	sw         $t0, -464($fp)
	#          IF local_115 GOTO label_83 ;
	lw         $t0, -464($fp)
	bnez       $t0, label_83
	#          local_117 = num == 15 ;
	lw         $t0, -4($fp)
	li         $t1, 15
	seq        $t0, $t0, $t1
	sw         $t0, -472($fp)
	#          local_118 = local_117 ;
	lw         $t0, -472($fp)
	sw         $t0, -476($fp)
	#          IF local_118 GOTO label_81 ;
	lw         $t0, -476($fp)
	bnez       $t0, label_81
	#          local_120 = num == 16 ;
	lw         $t0, -4($fp)
	li         $t1, 16
	seq        $t0, $t0, $t1
	sw         $t0, -484($fp)
	#          local_121 = local_120 ;
	lw         $t0, -484($fp)
	sw         $t0, -488($fp)
	#          IF local_121 GOTO label_79 ;
	lw         $t0, -488($fp)
	bnez       $t0, label_79
	#          local_123 = num == 17 ;
	lw         $t0, -4($fp)
	li         $t1, 17
	seq        $t0, $t0, $t1
	sw         $t0, -496($fp)
	#          local_124 = local_123 ;
	lw         $t0, -496($fp)
	sw         $t0, -500($fp)
	#          IF local_124 GOTO label_77 ;
	lw         $t0, -500($fp)
	bnez       $t0, label_77
	#          local_126 = num == 18 ;
	lw         $t0, -4($fp)
	li         $t1, 18
	seq        $t0, $t0, $t1
	sw         $t0, -508($fp)
	#          local_127 = local_126 ;
	lw         $t0, -508($fp)
	sw         $t0, -512($fp)
	#          IF local_127 GOTO label_75 ;
	lw         $t0, -512($fp)
	bnez       $t0, label_75
	#          local_129 = num == 19 ;
	lw         $t0, -4($fp)
	li         $t1, 19
	seq        $t0, $t0, $t1
	sw         $t0, -520($fp)
	#          local_130 = local_129 ;
	lw         $t0, -520($fp)
	sw         $t0, -524($fp)
	#          IF local_130 GOTO label_73 ;
	lw         $t0, -524($fp)
	bnez       $t0, label_73
	#          local_132 = num == 20 ;
	lw         $t0, -4($fp)
	li         $t1, 20
	seq        $t0, $t0, $t1
	sw         $t0, -532($fp)
	#          local_133 = local_132 ;
	lw         $t0, -532($fp)
	sw         $t0, -536($fp)
	#          IF local_133 GOTO label_71 ;
	lw         $t0, -536($fp)
	bnez       $t0, label_71
	#          local_135 = num == 21 ;
	lw         $t0, -4($fp)
	li         $t1, 21
	seq        $t0, $t0, $t1
	sw         $t0, -544($fp)
	#          local_136 = local_135 ;
	lw         $t0, -544($fp)
	sw         $t0, -548($fp)
	#          IF local_136 GOTO label_69 ;
	lw         $t0, -548($fp)
	bnez       $t0, label_69
	#          local_138 = LOAD data_50 ;
	la         $t0, data_50
	sw         $t0, -556($fp)
	#          local_139 = local_138 ;
	lw         $t0, -556($fp)
	sw         $t0, -560($fp)
	#          GOTO label_70 ;
	b          label_70
	#          LABEL label_69 ;
	label_69:

	#          local_137 = LOAD data_49 ;
	la         $t0, data_49
	sw         $t0, -552($fp)
	#          local_139 = local_137 ;
	lw         $t0, -552($fp)
	sw         $t0, -560($fp)
	#          LABEL label_70 ;
	label_70:

	#          local_140 = local_139 ;
	lw         $t0, -560($fp)
	sw         $t0, -564($fp)
	#          GOTO label_72 ;
	b          label_72
	#          LABEL label_71 ;
	label_71:

	#          local_134 = LOAD data_48 ;
	la         $t0, data_48
	sw         $t0, -540($fp)
	#          local_140 = local_134 ;
	lw         $t0, -540($fp)
	sw         $t0, -564($fp)
	#          LABEL label_72 ;
	label_72:

	#          local_141 = local_140 ;
	lw         $t0, -564($fp)
	sw         $t0, -568($fp)
	#          GOTO label_74 ;
	b          label_74
	#          LABEL label_73 ;
	label_73:

	#          local_131 = LOAD data_47 ;
	la         $t0, data_47
	sw         $t0, -528($fp)
	#          local_141 = local_131 ;
	lw         $t0, -528($fp)
	sw         $t0, -568($fp)
	#          LABEL label_74 ;
	label_74:

	#          local_142 = local_141 ;
	lw         $t0, -568($fp)
	sw         $t0, -572($fp)
	#          GOTO label_76 ;
	b          label_76
	#          LABEL label_75 ;
	label_75:

	#          local_128 = LOAD data_46 ;
	la         $t0, data_46
	sw         $t0, -516($fp)
	#          local_142 = local_128 ;
	lw         $t0, -516($fp)
	sw         $t0, -572($fp)
	#          LABEL label_76 ;
	label_76:

	#          local_143 = local_142 ;
	lw         $t0, -572($fp)
	sw         $t0, -576($fp)
	#          GOTO label_78 ;
	b          label_78
	#          LABEL label_77 ;
	label_77:

	#          local_125 = LOAD data_45 ;
	la         $t0, data_45
	sw         $t0, -504($fp)
	#          local_143 = local_125 ;
	lw         $t0, -504($fp)
	sw         $t0, -576($fp)
	#          LABEL label_78 ;
	label_78:

	#          local_144 = local_143 ;
	lw         $t0, -576($fp)
	sw         $t0, -580($fp)
	#          GOTO label_80 ;
	b          label_80
	#          LABEL label_79 ;
	label_79:

	#          local_122 = LOAD data_44 ;
	la         $t0, data_44
	sw         $t0, -492($fp)
	#          local_144 = local_122 ;
	lw         $t0, -492($fp)
	sw         $t0, -580($fp)
	#          LABEL label_80 ;
	label_80:

	#          local_145 = local_144 ;
	lw         $t0, -580($fp)
	sw         $t0, -584($fp)
	#          GOTO label_82 ;
	b          label_82
	#          LABEL label_81 ;
	label_81:

	#          local_119 = LOAD data_43 ;
	la         $t0, data_43
	sw         $t0, -480($fp)
	#          local_145 = local_119 ;
	lw         $t0, -480($fp)
	sw         $t0, -584($fp)
	#          LABEL label_82 ;
	label_82:

	#          local_146 = local_145 ;
	lw         $t0, -584($fp)
	sw         $t0, -588($fp)
	#          GOTO label_84 ;
	b          label_84
	#          LABEL label_83 ;
	label_83:

	#          local_116 = LOAD data_42 ;
	la         $t0, data_42
	sw         $t0, -468($fp)
	#          local_146 = local_116 ;
	lw         $t0, -468($fp)
	sw         $t0, -588($fp)
	#          LABEL label_84 ;
	label_84:

	#          local_147 = local_146 ;
	lw         $t0, -588($fp)
	sw         $t0, -592($fp)
	#          GOTO label_86 ;
	b          label_86
	#          LABEL label_85 ;
	label_85:

	#          local_113 = LOAD data_41 ;
	la         $t0, data_41
	sw         $t0, -456($fp)
	#          local_147 = local_113 ;
	lw         $t0, -456($fp)
	sw         $t0, -592($fp)
	#          LABEL label_86 ;
	label_86:

	#          local_148 = local_147 ;
	lw         $t0, -592($fp)
	sw         $t0, -596($fp)
	#          GOTO label_88 ;
	b          label_88
	#          LABEL label_87 ;
	label_87:

	#          local_110 = LOAD data_40 ;
	la         $t0, data_40
	sw         $t0, -444($fp)
	#          local_148 = local_110 ;
	lw         $t0, -444($fp)
	sw         $t0, -596($fp)
	#          LABEL label_88 ;
	label_88:

	#          local_149 = local_148 ;
	lw         $t0, -596($fp)
	sw         $t0, -600($fp)
	#          GOTO label_90 ;
	b          label_90
	#          LABEL label_89 ;
	label_89:

	#          local_107 = LOAD data_39 ;
	la         $t0, data_39
	sw         $t0, -432($fp)
	#          local_149 = local_107 ;
	lw         $t0, -432($fp)
	sw         $t0, -600($fp)
	#          LABEL label_90 ;
	label_90:

	#          local_150 = local_149 ;
	lw         $t0, -600($fp)
	sw         $t0, -604($fp)
	#          GOTO label_92 ;
	b          label_92
	#          LABEL label_91 ;
	label_91:

	#          local_104 = LOAD data_38 ;
	la         $t0, data_38
	sw         $t0, -420($fp)
	#          local_150 = local_104 ;
	lw         $t0, -420($fp)
	sw         $t0, -604($fp)
	#          LABEL label_92 ;
	label_92:

	#          local_151 = local_150 ;
	lw         $t0, -604($fp)
	sw         $t0, -608($fp)
	#          GOTO label_94 ;
	b          label_94
	#          LABEL label_93 ;
	label_93:

	#          local_101 = LOAD data_37 ;
	la         $t0, data_37
	sw         $t0, -408($fp)
	#          local_151 = local_101 ;
	lw         $t0, -408($fp)
	sw         $t0, -608($fp)
	#          LABEL label_94 ;
	label_94:

	#          local_152 = local_151 ;
	lw         $t0, -608($fp)
	sw         $t0, -612($fp)
	#          GOTO label_96 ;
	b          label_96
	#          LABEL label_95 ;
	label_95:

	#          local_98 = LOAD data_36 ;
	la         $t0, data_36
	sw         $t0, -396($fp)
	#          local_152 = local_98 ;
	lw         $t0, -396($fp)
	sw         $t0, -612($fp)
	#          LABEL label_96 ;
	label_96:

	#          local_153 = local_152 ;
	lw         $t0, -612($fp)
	sw         $t0, -616($fp)
	#          GOTO label_98 ;
	b          label_98
	#          LABEL label_97 ;
	label_97:

	#          local_95 = LOAD data_35 ;
	la         $t0, data_35
	sw         $t0, -384($fp)
	#          local_153 = local_95 ;
	lw         $t0, -384($fp)
	sw         $t0, -616($fp)
	#          LABEL label_98 ;
	label_98:

	#          local_154 = local_153 ;
	lw         $t0, -616($fp)
	sw         $t0, -620($fp)
	#          GOTO label_100 ;
	b          label_100
	#          LABEL label_99 ;
	label_99:

	#          local_92 = LOAD data_34 ;
	la         $t0, data_34
	sw         $t0, -372($fp)
	#          local_154 = local_92 ;
	lw         $t0, -372($fp)
	sw         $t0, -620($fp)
	#          LABEL label_100 ;
	label_100:

	#          local_155 = local_154 ;
	lw         $t0, -620($fp)
	sw         $t0, -624($fp)
	#          GOTO label_102 ;
	b          label_102
	#          LABEL label_101 ;
	label_101:

	#          local_89 = LOAD data_33 ;
	la         $t0, data_33
	sw         $t0, -360($fp)
	#          local_155 = local_89 ;
	lw         $t0, -360($fp)
	sw         $t0, -624($fp)
	#          LABEL label_102 ;
	label_102:

	#          local_156 = local_155 ;
	lw         $t0, -624($fp)
	sw         $t0, -628($fp)
	#          GOTO label_104 ;
	b          label_104
	#          LABEL label_103 ;
	label_103:

	#          local_86 = LOAD data_32 ;
	la         $t0, data_32
	sw         $t0, -348($fp)
	#          local_156 = local_86 ;
	lw         $t0, -348($fp)
	sw         $t0, -628($fp)
	#          LABEL label_104 ;
	label_104:

	#          local_157 = local_156 ;
	lw         $t0, -628($fp)
	sw         $t0, -632($fp)
	#          GOTO label_106 ;
	b          label_106
	#          LABEL label_105 ;
	label_105:

	#          local_83 = LOAD data_31 ;
	la         $t0, data_31
	sw         $t0, -336($fp)
	#          local_157 = local_83 ;
	lw         $t0, -336($fp)
	sw         $t0, -632($fp)
	#          LABEL label_106 ;
	label_106:

	#          local_158 = local_157 ;
	lw         $t0, -632($fp)
	sw         $t0, -636($fp)
	#          GOTO label_108 ;
	b          label_108
	#          LABEL label_107 ;
	label_107:

	#          local_80 = LOAD data_30 ;
	la         $t0, data_30
	sw         $t0, -324($fp)
	#          local_158 = local_80 ;
	lw         $t0, -324($fp)
	sw         $t0, -636($fp)
	#          LABEL label_108 ;
	label_108:

	#          local_159 = local_158 ;
	lw         $t0, -636($fp)
	sw         $t0, -640($fp)
	#          GOTO label_110 ;
	b          label_110
	#          LABEL label_109 ;
	label_109:

	#          local_77 = LOAD data_29 ;
	la         $t0, data_29
	sw         $t0, -312($fp)
	#          local_159 = local_77 ;
	lw         $t0, -312($fp)
	sw         $t0, -640($fp)
	#          LABEL label_110 ;
	label_110:

	#          RETURN local_159 ;
	lw         $v0, -640($fp)
	addu       $sp, $sp, 640
	jr         $ra
CellularAutomaton_prompt:
	move       $fp, $sp
	subu       $sp, $sp, 64
	#          ans = ALLOCATE String ;
	li         $a0, 1024
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	#          local_1 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_2 = LOAD data_51 ;
	la         $t0, data_51
	sw         $t0, -12($fp)
	#          local_3 = VCALL local_1 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          local_4 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -20($fp)
	#          local_5 = LOAD data_52 ;
	la         $t0, data_52
	sw         $t0, -24($fp)
	#          local_6 = VCALL local_4 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -20($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_7 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -32($fp)
	#          local_8 = VCALL local_7 in_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -32($fp)
	ulw        $t1, 20($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -36($fp)
	#          ans = local_8 ;
	lw         $t0, -36($fp)
	sw         $t0, -4($fp)
	#          local_9 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -40($fp)
	#          local_10 = LOAD data_2 ;
	la         $t0, data_2
	sw         $t0, -44($fp)
	#          local_11 = VCALL local_9 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_10 ;
	lw         $t0, -44($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -40($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          local_12 = LOAD data_53 ;
	la         $t0, data_53
	sw         $t0, -52($fp)
	#          local_13 = ans == local_12 ;
	lw         $t0, -4($fp)
	lw         $t1, -52($fp)
	li         $v0, 1
	sw         $v0, -56($fp)
	equal_loop_10:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_10
	beqz       $t2, end_loop_10
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_10
	b          end_loop_10
	not_equal_10:

	li         $v0, 0
	sw         $v0, -56($fp)
	end_loop_10:

	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          IF local_14 GOTO label_111 ;
	lw         $t0, -60($fp)
	bnez       $t0, label_111
	#          local_15 = 1 ;
	li         $t0, 1
	sw         $t0, -64($fp)
	#          GOTO label_112 ;
	b          label_112
	#          LABEL label_111 ;
	label_111:

	#          local_15 = 0 ;
	li         $t0, 0
	sw         $t0, -64($fp)
	#          LABEL label_112 ;
	label_112:

	#          RETURN local_15 ;
	lw         $v0, -64($fp)
	addu       $sp, $sp, 64
	jr         $ra
CellularAutomaton_prompt2:
	move       $fp, $sp
	subu       $sp, $sp, 64
	#          ans = ALLOCATE String ;
	li         $a0, 1024
	li         $v0, 9
	syscall
	sw         $v0, -4($fp)
	#          local_1 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -8($fp)
	#          local_2 = LOAD data_54 ;
	la         $t0, data_54
	sw         $t0, -12($fp)
	#          local_3 = VCALL local_1 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_2 ;
	lw         $t0, -12($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -8($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -16($fp)
	#          local_4 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -20($fp)
	#          local_5 = LOAD data_55 ;
	la         $t0, data_55
	sw         $t0, -24($fp)
	#          local_6 = VCALL local_4 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_5 ;
	lw         $t0, -24($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -20($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          local_7 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -32($fp)
	#          local_8 = LOAD data_56 ;
	la         $t0, data_56
	sw         $t0, -36($fp)
	#          local_9 = VCALL local_7 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_8 ;
	lw         $t0, -36($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -32($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          local_10 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -44($fp)
	#          local_11 = VCALL local_10 in_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -44($fp)
	ulw        $t1, 20($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          ans = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -4($fp)
	#          local_12 = LOAD data_57 ;
	la         $t0, data_57
	sw         $t0, -52($fp)
	#          local_13 = ans == local_12 ;
	lw         $t0, -4($fp)
	lw         $t1, -52($fp)
	li         $v0, 1
	sw         $v0, -56($fp)
	equal_loop_11:

	lb         $t2, ($t0)
	lb         $t3, ($t1)
	seq        $t4, $t2, $t3
	beqz       $t4, not_equal_11
	beqz       $t2, end_loop_11
	addu       $t0, $t0, 1
	addu       $t1, $t1, 1
	b          equal_loop_11
	b          end_loop_11
	not_equal_11:

	li         $v0, 0
	sw         $v0, -56($fp)
	end_loop_11:

	#          local_14 = local_13 ;
	lw         $t0, -56($fp)
	sw         $t0, -60($fp)
	#          IF local_14 GOTO label_113 ;
	lw         $t0, -60($fp)
	bnez       $t0, label_113
	#          local_15 = 0 ;
	li         $t0, 0
	sw         $t0, -64($fp)
	#          GOTO label_114 ;
	b          label_114
	#          LABEL label_113 ;
	label_113:

	#          local_15 = 1 ;
	li         $t0, 1
	sw         $t0, -64($fp)
	#          LABEL label_114 ;
	label_114:

	#          RETURN local_15 ;
	lw         $v0, -64($fp)
	addu       $sp, $sp, 64
	jr         $ra
Main___init__:
	move       $fp, $sp
	subu       $sp, $sp, 28
	#          local_0 = VCALL CellularAutomaton __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        CellularAutomaton___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -4($fp)
	#          local_1 = ALLOCATE CellularAutomaton ;
	li         $a0, 52
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	la         $t0, vt_CellularAutomaton
	sw         $t0, 8($v0)
	#          local_2 = LOAD data_58 ;
	la         $t0, data_58
	sw         $t0, -12($fp)
	#          SETATTR local_1 @type local_2 ;
	lw         $t0, -12($fp)
	lw         $t1, -8($fp)
	sw         $t0, 0($t1)
	#          local_3 = 36 ;
	li         $t0, 36
	sw         $t0, -16($fp)
	#          SETATTR local_1 @size local_3 ;
	lw         $t0, -16($fp)
	lw         $t1, -8($fp)
	sw         $t0, 4($t1)
	#          local_4 = 3 ;
	li         $t0, 3
	sw         $t0, -20($fp)
	#          SETATTR local_1 @order local_4 ;
	lw         $t0, -20($fp)
	lw         $t1, -8($fp)
	sw         $t0, 12($t1)
	#          local_5 = 2 ;
	li         $t0, 2
	sw         $t0, -24($fp)
	#          SETATTR local_1 @min_order local_5 ;
	lw         $t0, -24($fp)
	lw         $t1, -8($fp)
	sw         $t0, 16($t1)
	#          local_6 = VCALL CellularAutomaton __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_1 ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        CellularAutomaton___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -28($fp)
	#          SETATTR self cells local_6 ;
	lw         $t0, -28($fp)
	lw         $t1, 0($fp)
	sw         $t0, 36($t1)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 28
	jr         $ra
Main_main:
	move       $fp, $sp
	subu       $sp, $sp, 136
	#          continue = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          choice = ALLOCATE String ;
	li         $a0, 1024
	li         $v0, 9
	syscall
	sw         $v0, -8($fp)
	#          local_2 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -12($fp)
	#          local_3 = LOAD data_59 ;
	la         $t0, data_59
	sw         $t0, -16($fp)
	#          local_4 = VCALL local_2 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_3 ;
	lw         $t0, -16($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -12($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -20($fp)
	#          local_5 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -24($fp)
	#          local_6 = LOAD data_60 ;
	la         $t0, data_60
	sw         $t0, -28($fp)
	#          local_7 = VCALL local_5 out_string ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG local_6 ;
	lw         $t0, -28($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -24($fp)
	ulw        $t1, 12($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -32($fp)
	#          LABEL label_120 ;
	label_120:

	#          local_8 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -36($fp)
	#          local_9 = VCALL local_8 prompt2 ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -36($fp)
	ulw        $t1, 120($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -40($fp)
	#          IF local_9 GOTO label_121 ;
	lw         $t0, -40($fp)
	bnez       $t0, label_121
	#          GOTO label_122 ;
	b          label_122
	#          LABEL label_121 ;
	label_121:

	#          continue = 1 ;
	li         $t0, 1
	sw         $t0, -4($fp)
	#          local_10 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -44($fp)
	#          local_11 = VCALL local_10 option ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -44($fp)
	ulw        $t1, 112($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -48($fp)
	#          choice = local_11 ;
	lw         $t0, -48($fp)
	sw         $t0, -8($fp)
	#          local_13 = ALLOCATE CellularAutomaton ;
	li         $a0, 52
	li         $v0, 9
	syscall
	sw         $v0, -56($fp)
	la         $t0, vt_CellularAutomaton
	sw         $t0, 8($v0)
	#          local_14 = LOAD data_58 ;
	la         $t0, data_58
	sw         $t0, -60($fp)
	#          SETATTR local_13 @type local_14 ;
	lw         $t0, -60($fp)
	lw         $t1, -56($fp)
	sw         $t0, 0($t1)
	#          local_15 = 36 ;
	li         $t0, 36
	sw         $t0, -64($fp)
	#          SETATTR local_13 @size local_15 ;
	lw         $t0, -64($fp)
	lw         $t1, -56($fp)
	sw         $t0, 4($t1)
	#          local_16 = 3 ;
	li         $t0, 3
	sw         $t0, -68($fp)
	#          SETATTR local_13 @order local_16 ;
	lw         $t0, -68($fp)
	lw         $t1, -56($fp)
	sw         $t0, 12($t1)
	#          local_17 = 2 ;
	li         $t0, 2
	sw         $t0, -72($fp)
	#          SETATTR local_13 @min_order local_17 ;
	lw         $t0, -72($fp)
	lw         $t1, -56($fp)
	sw         $t0, 16($t1)
	#          local_18 = VCALL CellularAutomaton __init__ ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_13 ;
	lw         $t0, -56($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	jal        CellularAutomaton___init__
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -76($fp)
	#          local_12 = GETTYPEADDR local_18 ;
	lw         $t1, -76($fp)
	lw         $t0, 8($t1)
	sw         $t0, -52($fp)
	#          local_19 = VCALL local_12 init ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_18 ;
	lw         $t0, -76($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	#          ARG choice ;
	lw         $t0, -8($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -52($fp)
	ulw        $t1, 52($t0)
	jalr       $t1
	addu       $sp, $sp, 8
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -80($fp)
	#          SETATTR self cells local_19 ;
	lw         $t0, -80($fp)
	lw         $t1, 0($fp)
	sw         $t0, 36($t1)
	#          local_21 = GETATTR self cells ;
	lw         $t0, 0($fp)
	lw         $t1, 36($t0)
	sw         $t1, -88($fp)
	#          local_20 = GETTYPEADDR local_21 ;
	lw         $t1, -88($fp)
	lw         $t0, 8($t1)
	sw         $t0, -84($fp)
	#          local_22 = VCALL local_20 print ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_21 ;
	lw         $t0, -88($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -84($fp)
	ulw        $t1, 56($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -92($fp)
	#          LABEL label_117 ;
	label_117:

	#          IF continue GOTO label_118 ;
	lw         $t0, -4($fp)
	bnez       $t0, label_118
	#          GOTO label_119 ;
	b          label_119
	#          LABEL label_118 ;
	label_118:

	#          local_23 = GETTYPEADDR self ;
	lw         $t1, 0($fp)
	lw         $t0, 8($t1)
	sw         $t0, -96($fp)
	#          local_24 = VCALL local_23 prompt ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG self ;
	lw         $t0, 0($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -96($fp)
	ulw        $t1, 116($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -100($fp)
	#          IF local_24 GOTO label_115 ;
	lw         $t0, -100($fp)
	bnez       $t0, label_115
	#          continue = 0 ;
	li         $t0, 0
	sw         $t0, -4($fp)
	#          local_31 = continue ;
	lw         $t0, -4($fp)
	sw         $t0, -128($fp)
	#          GOTO label_116 ;
	b          label_116
	#          LABEL label_115 ;
	label_115:

	#          local_26 = GETATTR self cells ;
	lw         $t0, 0($fp)
	lw         $t1, 36($t0)
	sw         $t1, -108($fp)
	#          local_25 = GETTYPEADDR local_26 ;
	lw         $t1, -108($fp)
	lw         $t0, 8($t1)
	sw         $t0, -104($fp)
	#          local_27 = VCALL local_25 evolve ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_26 ;
	lw         $t0, -108($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -104($fp)
	ulw        $t1, 108($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -112($fp)
	#          local_29 = GETATTR self cells ;
	lw         $t0, 0($fp)
	lw         $t1, 36($t0)
	sw         $t1, -120($fp)
	#          local_28 = GETTYPEADDR local_29 ;
	lw         $t1, -120($fp)
	lw         $t0, 8($t1)
	sw         $t0, -116($fp)
	#          local_30 = VCALL local_28 print ;
	subu       $sp, $sp, 8
	sw         $fp, 0($sp)
	sw         $ra, 4($sp)
	#          ARG local_29 ;
	lw         $t0, -120($fp)
	subu       $sp, $sp, 4
	sw         $t0, ($sp)
	lw         $t0, -116($fp)
	ulw        $t1, 56($t0)
	jalr       $t1
	addu       $sp, $sp, 4
	lw         $fp, 0($sp)
	lw         $ra, 4($sp)
	addu       $sp, $sp, 8
	sw         $v0, -124($fp)
	#          local_31 = local_30 ;
	lw         $t0, -124($fp)
	sw         $t0, -128($fp)
	#          LABEL label_116 ;
	label_116:

	#          GOTO label_117 ;
	b          label_117
	#          LABEL label_119 ;
	label_119:

	#          local_32 = 0 ;
	li         $t0, 0
	sw         $t0, -132($fp)
	#          GOTO label_120 ;
	b          label_120
	#          LABEL label_122 ;
	label_122:

	#          local_33 = 0 ;
	li         $t0, 0
	sw         $t0, -136($fp)
	#          RETURN self ;
	lw         $v0, 0($fp)
	addu       $sp, $sp, 136
	jr         $ra

.data
	data_1:
		.asciiz    "Main"
	data_2:
		.asciiz    "\n"
	data_3:
		.asciiz    " "
	data_4:
		.asciiz    "X"
	data_5:
		.asciiz    "-"
	data_6:
		.asciiz    "\nPlease chose a number:\n"
	data_7:
		.asciiz    "\t1: A cross\n"
	data_8:
		.asciiz    "\t2: A slash from the upper left to lower right\n"
	data_9:
		.asciiz    "\t3: A slash from the upper right to lower left\n"
	data_10:
		.asciiz    "\t4: An X\n"
	data_11:
		.asciiz    "\t5: A greater than sign \n"
	data_12:
		.asciiz    "\t6: A less than sign\n"
	data_13:
		.asciiz    "\t7: Two greater than signs\n"
	data_14:
		.asciiz    "\t8: Two less than signs\n"
	data_15:
		.asciiz    "\t9: A 'V'\n"
	data_16:
		.asciiz    "\t10: An inverse 'V'\n"
	data_17:
		.asciiz    "\t11: Numbers 9 and 10 combined\n"
	data_18:
		.asciiz    "\t12: A full grid\n"
	data_19:
		.asciiz    "\t13: A 'T'\n"
	data_20:
		.asciiz    "\t14: A plus '+'\n"
	data_21:
		.asciiz    "\t15: A 'W'\n"
	data_22:
		.asciiz    "\t16: An 'M'\n"
	data_23:
		.asciiz    "\t17: An 'E'\n"
	data_24:
		.asciiz    "\t18: A '3'\n"
	data_25:
		.asciiz    "\t19: An 'O'\n"
	data_26:
		.asciiz    "\t20: An '8'\n"
	data_27:
		.asciiz    "\t21: An 'S'\n"
	data_28:
		.asciiz    "Your choice => "
	data_29:
		.asciiz    " XX  XXXX XXXX  XX  "
	data_30:
		.asciiz    "    X   X   X   X   X    "
	data_31:
		.asciiz    "X     X     X     X     X"
	data_32:
		.asciiz    "X   X X X   X   X X X   X"
	data_33:
		.asciiz    "X     X     X   X   X    "
	data_34:
		.asciiz    "    X   X   X     X     X"
	data_35:
		.asciiz    "X  X  X  XX  X      "
	data_36:
		.asciiz    " X  XX  X  X  X     "
	data_37:
		.asciiz    "X   X X X   X  "
	data_38:
		.asciiz    "  X   X X X   X"
	data_39:
		.asciiz    "X X X X X X X X"
	data_40:
		.asciiz    "XXXXXXXXXXXXXXXXXXXXXXXXX"
	data_41:
		.asciiz    "XXXXX  X    X    X    X  "
	data_42:
		.asciiz    "  X    X  XXXXX  X    X  "
	data_43:
		.asciiz    "X     X X X X   X X  "
	data_44:
		.asciiz    "  X X   X X X X     X"
	data_45:
		.asciiz    "XXXXX   X   XXXXX   X   XXXX"
	data_46:
		.asciiz    "XXX    X   X  X    X   XXXX "
	data_47:
		.asciiz    " XX X  XX  X XX "
	data_48:
		.asciiz    " XX X  XX  X XX X  XX  X XX "
	data_49:
		.asciiz    " XXXX   X    XX    X   XXXX "
	data_50:
		.asciiz    "                         "
	data_51:
		.asciiz    "Would you like to continue with the next generation? \n"
	data_52:
		.asciiz    "Please use lowercase y or n for your answer [y]: "
	data_53:
		.asciiz    "n"
	data_54:
		.asciiz    "\n\n"
	data_55:
		.asciiz    "Would you like to choose a background pattern? \n"
	data_56:
		.asciiz    "Please use lowercase y or n for your answer [n]: "
	data_57:
		.asciiz    "y"
	data_58:
		.asciiz    "CellularAutomaton"
	data_59:
		.asciiz    "Welcome to the Game of Life.\n"
	data_60:
		.asciiz    "There are many initial states to choose from. \n"
	data_61:
		.asciiz    "Bool"
	data_62:
		.asciiz    "Int"
	data_63:
		.asciiz    "String"
	data_abort:
		.asciiz    "Abort called from class "
	new_line:
		.asciiz    "\n"
	vt_Object:
		.space     392
	vt_IO:
		.space     392
	vt_Int:
		.space     392
	vt_String:
		.space     392
	vt_Bool:
		.space     392
	vt_Board:
		.space     392
	vt_CellularAutomaton:
		.space     392
	vt_Main:
		.space     392
	abort_String:
		.asciiz    "String"
	abort_Int:
		.asciiz    "Int"
	abort_Bool:
		.asciiz    "Bool"
